<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PW.Common</name>
    </assembly>
    <members>
        <member name="T:PW.Accumulator">
            <summary>
            Simple integer accumulator class
            </summary>
        </member>
        <member name="M:PW.Accumulator.#ctor">
            <summary>
            Creates a new instance with an initial value of 1.
            </summary>
        </member>
        <member name="M:PW.Accumulator.#ctor(System.Int32)">
            <summary>
            Creates a new instance with the specified initial value.
            </summary>
            <param name="initialValue"></param>
        </member>
        <member name="P:PW.Accumulator.Next">
            <summary>
            Increments the accumulator and returns the new value.
            </summary>
        </member>
        <member name="P:PW.Accumulator.Current">
            <summary>
            The current value of the accumulator.
            </summary>
        </member>
        <member name="T:PW.AppRegistration.RegistrationManager">
            <summary>
            Management of application registrations for LaunchPad.
            </summary>
        </member>
        <member name="M:PW.AppRegistration.RegistrationManager.Register(System.String,System.String)">
            <summary>
            Registers an application with LaunchPad.
            </summary>
        </member>
        <member name="M:PW.AppRegistration.RegistrationManager.Register">
            <summary>
            Registers an application with LaunchPad using defaults. 
            </summary>
        </member>
        <member name="M:PW.AppRegistration.RegistrationManager.UnRegister(System.String)">
            <summary>
            Unregisters an application with LaunchPad.
            </summary>
        </member>
        <member name="M:PW.AppRegistration.RegistrationManager.UnRegister">
            <summary>
            Unregisters the current application with LaunchPad.
            </summary>
        </member>
        <member name="M:PW.AppRegistration.RegistrationManager.GetRegistrations">
            <summary>
            Returns a list of all existing application registrations.
            </summary>
        </member>
        <member name="M:PW.AppRegistration.RegistrationManager.GetAppRegKey">
            <summary>
            Opens the registry key used by LaunchPad.
            </summary>   
        </member>
        <member name="T:PW.BackingField">
            <summary>
            Helper class for use with backing field assignment.
            </summary>
        </member>
        <member name="M:PW.BackingField.AssignIfNotEqual``1(``0,``0@)">
            <summary>
            Useful when setting backing fields. Atomically determine if the field needs updating and update it.
            Returns true if storage was updated with value.
            Assigns '<paramref name="value"/>' to '<paramref name="storage"/>', only if they are different.
            </summary>
            <typeparam name="T">The type of the two values.</typeparam>
            <param name="storage">Reference to the stored value.</param>
            <param name="value">The new value to be stored. </param>
            <returns>Returns <see langword="true"/> if the value was updated, otherwise <see langword="false"/>. </returns>
        </member>
        <member name="M:PW.BackingField.GetLazy``1(``0@,System.Func{``0})">
            <summary>
            Returns the value of the lazy-initialized variable '<paramref name="field"/>'. 
            If <paramref name="field"/> is currently null <paramref name="factory"/> is first called to obtain and set its value.
            For use with nullable reference types.
            </summary>
            <typeparam name="T">The data type of the reference-type."/> </typeparam>
            <param name="field">The value to be returned, or set then returned.</param>
            <param name="factory">A <see cref="T:System.Func`1"/> used to populate <paramref name="field"/>, as required</param>
            <returns>The value <paramref name="field"/></returns>
        </member>
        <member name="M:PW.BackingField.GetLazyValue``1(System.Nullable{``0}@,System.Func{``0})">
            <summary>
            Returns the value of the lazy-initialized variable '<paramref name="field"/>'. 
            If <paramref name="field"/> has no value <paramref name="factory"/> is first called to obtain and set its value.
            For use with nullable value types.
            </summary>
            <typeparam name="T">The data type of the value-type field."/> </typeparam>
            <param name="field">The value to be returned, or set then returned.</param>
            <param name="factory">A <see cref="T:System.Func`1"/> used to populate <paramref name="field"/>, as required</param>
            <returns>The value <paramref name="field"/></returns>
        </member>
        <member name="T:PW.Collections.CursoredList`1">
            <summary>
            A generic list which can be accessed by position of a 'cursor'. 
            An event is raised whenever the cursor position changes.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:PW.Collections.CursoredList`1.PositionChangedHandler">
            <summary>
            <see cref="E:PW.Collections.CursoredList`1.PositionChanged"/> event delegate.
            </summary>
        </member>
        <member name="E:PW.Collections.CursoredList`1.PositionChanged">
            <summary>
            Raised whenever the cursor position changes. 
            </summary>
        </member>
        <member name="M:PW.Collections.CursoredList`1.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:PW.Collections.CursoredList`1.#ctor(System.Int32)">
            <summary>
            Creates a new instance with the specified initial capacity.
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:PW.Collections.CursoredList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Creates a new instance containing items from <paramref name="seq"/>.
            </summary>
            <param name="seq"></param>
        </member>
        <member name="P:PW.Collections.CursoredList`1.IsEmpty">
            <summary>
            Determines whether the list has any items.
            </summary>
        </member>
        <member name="P:PW.Collections.CursoredList`1.AutoLoop">
            <summary>
            Whether or not to loop the list when moving forward past the end, or backwards past the start.
            </summary>
        </member>
        <member name="P:PW.Collections.CursoredList`1.Position">
            <summary>
            The cursor position.
            </summary>
        </member>
        <member name="M:PW.Collections.CursoredList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds the files to the playlist. NB: This is *not* thread-safe. The caller is responsible for using a lock, or other mechanism, to prevent multi-thread access issues.
            </summary>
            <param name="seq"></param>
        </member>
        <member name="M:PW.Collections.CursoredList`1.Add(`0)">
            <summary>
            Adds the item to the end of the list.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:PW.Collections.CursoredList`1.Shuffle">
            <summary>
            Randomizes the order of the list items
            </summary>
        </member>
        <member name="M:PW.Collections.CursoredList`1.MoveFirst">
            <summary>
            Moves the cursor to the first item in the list.
            </summary>
        </member>
        <member name="M:PW.Collections.CursoredList`1.MoveBack">
            <summary>
            Moves the cursor to the previous item in the list. Returns true if move was successful, otherwise false.
            </summary>
        </member>
        <member name="M:PW.Collections.CursoredList`1.MoveNext">
            <summary>
            Moves the cursor to the next item in the list. Returns true if move was successful, otherwise false.
            </summary>
        </member>
        <member name="M:PW.Collections.CursoredList`1.MoveTo(System.Func{`0,System.Boolean})">
            <summary>
            Moves <see cref="P:PW.Collections.CursoredList`1.Position"/> to value for which <paramref name="selector"/> returns true. 
            </summary>
            <param name="selector">Predicate to determine <see cref="P:PW.Collections.CursoredList`1.Position"/>.</param>
            <returns><typeparamref name="T"/> at new <see cref="P:PW.Collections.CursoredList`1.Position"/>, or default(<typeparamref name="T"/>) if <paramref name="selector"/> never returns true.</returns>
        </member>
        <member name="M:PW.Collections.CursoredList`1.Move(PW.Collections.IterateDirection)">
            <summary>
            Move the cursor in the specified direction.
            </summary>
        </member>
        <member name="P:PW.Collections.CursoredList`1.Count">
            <summary>
            Returns the number of items in the list.
            </summary>
        </member>
        <member name="P:PW.Collections.CursoredList`1.Current">
            <summary>
            Returns the item at the current cursor position.
            </summary>
        </member>
        <member name="M:PW.Collections.CursoredList`1.RemoveCurrent">
            <summary>
            Removes the item at the current cursor position from the list.
            </summary>
        </member>
        <member name="P:PW.Collections.CursoredList`1.Item(System.Int32)">
            <summary>
            Gets the element at the specified index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:PW.Collections.CustomOrderLoopingEnumerator">
            <summary>
            An enumerator that traverses a range, as a loop. That is, when it reaches <see cref="P:PW.Collections.CustomOrderLoopingEnumerator.Last"/> it moves to <see cref="P:PW.Collections.CustomOrderLoopingEnumerator.First"/>.
            </summary>
        </member>
        <member name="P:PW.Collections.CustomOrderLoopingEnumerator.First">
            <summary>
            First value in the range
            </summary>
        </member>
        <member name="P:PW.Collections.CustomOrderLoopingEnumerator.Last">
            <summary>
            Last value in the range.
            </summary>
        </member>
        <member name="P:PW.Collections.CustomOrderLoopingEnumerator.Current">
            <summary>
            The current value
            </summary>
        </member>
        <member name="P:PW.Collections.CustomOrderLoopingEnumerator.Looping">
            <summary>
            Determines whether the enumerator will loop which it reaches the end.
            </summary>
        </member>
        <member name="M:PW.Collections.CustomOrderLoopingEnumerator.#ctor(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="M:PW.Collections.CustomOrderLoopingEnumerator.GetEnumerator">
            <summary>
            Returns the range enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="M:PW.Collections.CustomOrderLoopingEnumerator.Dispose">
            <summary>
            Does nothing. Required for <see cref="T:System.Collections.Generic.IEnumerator`1"/> interface.
            </summary>
        </member>
        <member name="M:PW.Collections.CustomOrderLoopingEnumerator.MoveNext">
            <summary>
            Move to the next value in the order. If at the end, then loop to the first.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PW.Collections.CustomOrderLoopingEnumerator.Reset">
            <summary>
            Resets the enumerator to the initial state: first value, moving forwards.
            </summary>
        </member>
        <member name="T:PW.Collections.Grouping`2">
            <summary>
            
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TElement"></typeparam>
        </member>
        <member name="M:PW.Collections.Grouping`2.#ctor(`0,System.Collections.Generic.IEnumerable{`1})">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="elements"></param>
        </member>
        <member name="P:PW.Collections.Grouping`2.Key">
            <summary>
            
            </summary>
        </member>
        <member name="T:PW.Collections.Groupings`2">
            <summary>
            
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TElements"></typeparam>
        </member>
        <member name="T:PW.Collections.ILoopable">
            <summary>
            Implemented by objects that support loping, such as certain enumerators.
            </summary>
        </member>
        <member name="P:PW.Collections.ILoopable.Looping">
            <summary>
            Determines whether the object will loop which it reaches the end of a sequence.
            </summary>
        </member>
        <member name="T:PW.Collections.IterateDirection">
            <summary>
            Options for iteration direction or movement of cursor index in sequence.
            </summary>
        </member>
        <member name="F:PW.Collections.IterateDirection.Forward">
            <summary>
            Iterate or move index to next item or position.
            </summary>
        </member>
        <member name="F:PW.Collections.IterateDirection.Backwards">
            <summary>
            Iterate or move index to previous item or position.
            </summary>
        </member>
        <member name="T:PW.Collections.ListOfLists`1">
            <summary>
            A list where each element is a <see cref="T:System.Collections.Generic.List`1"/>
            </summary>  
        </member>
        <member name="T:PW.Collections.LoopingRangeEnumerator">
            <summary>
            An enumerator that traverses a range, as a loop. That is, when it reaches <see cref="P:PW.Collections.LoopingRangeEnumerator.Last"/> it moves to <see cref="P:PW.Collections.LoopingRangeEnumerator.First"/>.
            </summary>
        </member>
        <member name="P:PW.Collections.LoopingRangeEnumerator.First">
            <summary>
            First value in the range
            </summary>
        </member>
        <member name="P:PW.Collections.LoopingRangeEnumerator.Last">
            <summary>
            Last value in the range.
            </summary>
        </member>
        <member name="P:PW.Collections.LoopingRangeEnumerator.Current">
            <summary>
            The current value
            </summary>
        </member>
        <member name="M:PW.Collections.LoopingRangeEnumerator.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new instance
            </summary>
            <param name="first"></param>
            <param name="last"></param>
        </member>
        <member name="M:PW.Collections.LoopingRangeEnumerator.GetEnumerator">
            <summary>
            Returns the range enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="M:PW.Collections.LoopingRangeEnumerator.Dispose">
            <summary>
            Does nothing. Required for <see cref="T:System.Collections.Generic.IEnumerator`1"/> interface.
            </summary>
        </member>
        <member name="M:PW.Collections.LoopingRangeEnumerator.MoveNext">
            <summary>
            Move to the next value in the range.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PW.Collections.LoopingRangeEnumerator.Reset">
            <summary>
            Resets the enumerator to the initial state: first value, moving forwards.
            </summary>
        </member>
        <member name="T:PW.Collections.StringNaturalComparer">
            <summary>
            Performs 'natural' compare, sort and equality tests for strings and classes implementing <see cref="T:PW.IValue`1"/> of string
            Digits in the strings are considered as numerical content rather than text. Tests are not case-sensitive.
            </summary>
        </member>
        <member name="M:PW.Collections.StringNaturalComparer.#ctor">
            <summary>
            Creates a new instance which sorts in ascending order.
            </summary>
        </member>
        <member name="M:PW.Collections.StringNaturalComparer.#ctor(PW.SortOrder)">
            <summary>
            Creates a new instance with the specified <see cref="T:PW.SortOrder"/>
            </summary>
        </member>
        <member name="P:PW.Collections.StringNaturalComparer.AscendingComparer">
            <summary>
            Static instance of an ascending natural string comparer.
            </summary>
        </member>
        <member name="P:PW.Collections.StringNaturalComparer.DescendingComparer">
            <summary>
            Static instance of an descending natural string comparer.
            </summary>
        </member>
        <member name="M:PW.Collections.StringNaturalComparer.GetInstance(PW.SortOrder)">
            <summary>
            Returns a static instance with the specified <see cref="P:PW.Collections.StringNaturalComparer.SortOrder"/>.
            </summary>
        </member>
        <member name="P:PW.Collections.StringNaturalComparer.SortOrder">
            <summary>
            The sort order of this <see cref="T:PW.Collections.StringNaturalComparer"/> instance.
            </summary>
        </member>
        <member name="M:PW.Collections.StringNaturalComparer.Compare(System.String,System.String)">
            <summary>
            Compares two instances.
            </summary>
        </member>
        <member name="M:PW.Collections.StringNaturalComparer.Equals(System.String,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:PW.Collections.StringNaturalComparer.GetHashCode(System.String)">
            <summary>
            Gets the hash code for the specified string
            </summary>
        </member>
        <member name="M:PW.Collections.StringNaturalComparer.Compare(PW.IValue{System.String},PW.IValue{System.String})">
            <summary>
            Compares two instances.
            </summary>
        </member>
        <member name="M:PW.Collections.StringNaturalComparer.Equals(PW.IValue{System.String},PW.IValue{System.String})">
            <summary>
            Determines whether two instances are equal.
            </summary>
        </member>
        <member name="M:PW.Collections.StringNaturalComparer.GetHashCode(PW.IValue{System.String})">
            <summary>
            Returns a hashcode for the instance.
            </summary>
        </member>
        <member name="M:PW.Collections.StringNaturalComparer.Compare(System.Object,System.Object)">
            <summary>
            
            </summary>
        </member>
        <member name="M:PW.Collections.StringNaturalComparer.Equals(System.Object,System.Object)">
            <summary>
            
            </summary>
        </member>
        <member name="M:PW.Collections.StringNaturalComparer.GetHashCode(System.Object)">
            <summary>
            
            </summary>
        </member>
        <member name="T:PW.Collections.ReadonlyOneToMany`2">
            <summary>
            Represents a one-to-many associative grouping where 'One' and 'Many' are of different types.
            </summary>
        </member>
        <member name="M:PW.Collections.ReadonlyOneToMany`2.#ctor(`0,System.Collections.Generic.IReadOnlyList{`1})">
            <summary>
            Represents a one-to-many associative grouping where 'One' and 'Many' are of different types.
            </summary>
        </member>
        <member name="T:PW.Collections.OneToMany`2">
            <summary>
            Represents a one-to-many associative grouping where 'One' and 'Many' are of different types.
            </summary>
        </member>
        <member name="M:PW.Collections.OneToMany`2.#ctor(`0,System.Collections.Generic.List{`1})">
            <summary>
            Represents a one-to-many associative grouping where 'One' and 'Many' are of different types.
            </summary>
        </member>
        <member name="T:PW.Collections.OscillatingRangeEnumerator">
            <summary>
            An enumerator that traverses a range, in both directions, as a loop. I.e. Loop(first -> last -> first)
            </summary>
        </member>
        <member name="P:PW.Collections.OscillatingRangeEnumerator.First">
            <summary>
            First value in the range
            </summary>
        </member>
        <member name="P:PW.Collections.OscillatingRangeEnumerator.Last">
            <summary>
            Last value in the range.
            </summary>
        </member>
        <member name="P:PW.Collections.OscillatingRangeEnumerator.Current">
            <summary>
            The current value
            </summary>
        </member>
        <member name="M:PW.Collections.OscillatingRangeEnumerator.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new instance
            </summary>
            <param name="first"></param>
            <param name="last"></param>
        </member>
        <member name="M:PW.Collections.OscillatingRangeEnumerator.GetEnumerator">
            <summary>
            Returns the range enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="M:PW.Collections.OscillatingRangeEnumerator.Dispose">
            <summary>
            Does nothing. Required for <see cref="T:System.Collections.Generic.IEnumerator`1"/> interface.
            </summary>
        </member>
        <member name="M:PW.Collections.OscillatingRangeEnumerator.MoveNext">
            <summary>
            Move to the next value in the range.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PW.Collections.OscillatingRangeEnumerator.Reset">
            <summary>
            Resets the enumerator to the initial state: first value, moving forwards.
            </summary>
        </member>
        <member name="T:PW.Collections.PositionChangedEventData`1">
            <summary>
            PositionChangedEventArgs
            </summary>
        </member>
        <member name="M:PW.Collections.PositionChangedEventData`1.#ctor(System.Int32,System.Int32,`0,`0)">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="P:PW.Collections.PositionChangedEventData`1.CurrentPosition">
            <summary>
            The current position of the cursor.
            </summary>
        </member>
        <member name="P:PW.Collections.PositionChangedEventData`1.PreviousPosition">
            <summary>
            The previous position of the cursor.
            </summary>
        </member>
        <member name="P:PW.Collections.PositionChangedEventData`1.CurrentItem">
            <summary>
            The current position of the cursor.
            </summary>
        </member>
        <member name="P:PW.Collections.PositionChangedEventData`1.PreviousItem">
            <summary>
            The previous position of the cursor.
            </summary>
        </member>
        <member name="T:PW.Collections.StringReplacementList">
            <summary>
            A list of string-pairs for 'find and replace' purposes.
            </summary>
        </member>
        <member name="M:PW.Collections.StringReplacementList.#ctor(System.Collections.Generic.IEnumerable{System.ValueTuple{System.String,System.String}})">
            <summary>
            Creates a new instance from the enumeration.
            </summary>
            <param name="collection"></param>
            <exception cref="T:System.ArgumentException">If any string is null, or any 'Find' string is empty.</exception>
        </member>
        <member name="T:PW.CompressedString">
            <summary>
            Wrapper around <see cref="T:System.IO.Compression.DeflateStream"/> for easy in-memory string compression/decompression.
            </summary>
        </member>
        <member name="P:PW.CompressedString.Bytes">
            <summary>
            Array of bytes representing the compressed string.
            </summary>    
        </member>
        <member name="M:PW.CompressedString.#ctor(System.Byte[])">
            <summary>
            Creates a new instance from a previously compressed byte-data. For use by de-serializers.
            </summary>
            <param name="bytes">Previously compressed string's byte-data.</param>
        </member>
        <member name="M:PW.CompressedString.#ctor(System.String)">
            <summary>
            Creates a new instance by compressing the supplied string.
            </summary>
            <param name="str">String to compress.</param>
        </member>
        <member name="M:PW.CompressedString.ToString">
            <summary>
            Decompresses the byte-data to return the original string.
            </summary>
        </member>
        <member name="T:PW.Constants">
            <summary>
            Constants
            </summary>
        </member>
        <member name="F:PW.Constants.NotFound">
            <summary>
            Index returned by methods when item was not found in list.
            </summary>
        </member>
        <member name="T:PW.Converter`2">
            <summary>
            Converts from TSource to TResult using function delegates.
            </summary>
            <typeparam name="TInput">The input type</typeparam>
            <typeparam name="TOutput">The output type</typeparam>
        </member>
        <member name="M:PW.Converter`2.#ctor(System.Func{`0},System.Func{`0,`1})">
            <summary>
            Creates a new instance of the class
            </summary>
            <param name="inputProvider">A function delegate which provides the input to be converted</param>
            <param name="convertionCallback">A function delegate which performs the conversion from <typeparamref name="TInput"/> to  <typeparamref name="TOutput"/></param>
        </member>
        <member name="M:PW.Converter`2.Convert">
            <summary>
            Performs the conversion from <typeparamref name="TInput"/> to <typeparamref name="TOutput"/>
            </summary>
            <returns></returns>
        </member>
        <member name="T:PW.PayloadEventHandler`1">
            <summary>
            Delegate used to handle events with a strongly-typed payload only. No sender, just data of type <typeparamref name="TPayload"/>.
            </summary>
            <typeparam name="TPayload">The type event's payload.</typeparam>
        </member>
        <member name="T:PW.EventHandler`2">
            <summary>
            Delegate used to handle events with a strongly-typed sender.
            </summary>
            <typeparam name="TSender">The type of the sender.</typeparam>
            <typeparam name="TArgs">The type of the event arguments.</typeparam>
            <param name="sender">The control where the event originated.</param>
            <param name="e">Any event arguments.</param>
        </member>
        <member name="T:PW.Dates.DateTimeRange">
            <summary>
            Used when querying data from a DB WHERE rows fall between 
            two dates or between the start and end of a single day.
            </summary>
        </member>
        <member name="P:PW.Dates.DateTimeRange.Start">
            <summary>
            The start date of the range
            </summary>
        </member>
        <member name="P:PW.Dates.DateTimeRange.End">
            <summary>
            The end date of the range
            </summary>
        </member>
        <member name="M:PW.Dates.DateTimeRange.#ctor(System.DateTime)">
            <summary>
            Creates and instance with dates representing the start (00:00:00) and end (23:59:59) of a single day.
            </summary>
            <param name="date"></param>
        </member>
        <member name="M:PW.Dates.DateTimeRange.#ctor(System.DateTime,System.DateTime)">
            <summary>
            Constructs an instance from the <paramref name="startDate"/> with time 00:00:00 to the <paramref name="endDate"/> with time 23:59:59
            </summary>
            <param name="startDate"></param>
            <param name="endDate"></param>
        </member>
        <member name="M:PW.Dates.DateTimeRange.Today">
            <summary>
            Returns to <see cref="T:System.DateTime"/> values representing the range of time for the current day. The date component for both are the same, however the time
            component is 00:00:00 for Start and 23:59:59 for End. Useful for date-between type queries.
            </summary>    
        </member>
        <member name="M:PW.Dates.DateTimeRange.GetEqualityComponents">
            <summary>
            Returns the elements by which instances of this class are compared.
            </summary>
        </member>
        <member name="T:PW.Dates.MonthAndYear">
            <summary>
            Simple class to store and operate on a month and year as a single unit.
            </summary>
        </member>
        <member name="P:PW.Dates.MonthAndYear.Year">
            <summary>
            Year component of the Month and Year pair
            </summary>
        </member>
        <member name="P:PW.Dates.MonthAndYear.Month">
            <summary>
            Month component of the Month and Year pair
            </summary>
        </member>
        <member name="M:PW.Dates.MonthAndYear.#ctor">
            <summary>
            Constructs an instance using the current month and year.
            </summary>
        </member>
        <member name="M:PW.Dates.MonthAndYear.#ctor(PW.Dates.Months,System.Int32)">
            <summary>
            Constructs an instance for the specified month and year.
            </summary>
            <param name="month"></param>
            <param name="year"></param>
        </member>
        <member name="M:PW.Dates.MonthAndYear.Current">
            <summary>
            Creates an instance with the current month and year values.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PW.Dates.MonthAndYear.PreviousMonth">
            <summary>
            Returns the previous month for the current year. If the current month is January then returns December and the previous year.
            </summary>
        </member>
        <member name="M:PW.Dates.MonthAndYear.GetEqualityComponents">
            <summary>
            Returns the elements by which instances of this class are compared.
            </summary>
        </member>
        <member name="T:PW.Dates.MonthList">
            <summary>
            Singleton class providing an list of month names, in English.
            </summary>
        </member>
        <member name="P:PW.Dates.MonthList.Instance">
            <summary>
            Returns the singleton instance of the class
            </summary>
        </member>
        <member name="P:PW.Dates.MonthList.Count">
            <summary>
            The number of months in a year
            </summary>
        </member>
        <member name="P:PW.Dates.MonthList.Item(System.Int32)">
            <summary>
            Returns a month by index
            </summary>
        </member>
        <member name="M:PW.Dates.MonthList.GetEnumerator">
            <summary>
            Returns an enumerator to iterate through the months
            </summary>
        </member>
        <member name="T:PW.Dates.Months">
            <summary>
            The named months of the year
            </summary>
        </member>
        <member name="F:PW.Dates.Months.January">
            <summary>
            Represents the calendar month January
            </summary>
        </member>
        <member name="F:PW.Dates.Months.February">
            <summary>
            Represents the calendar month February
            </summary>
        </member>
        <member name="F:PW.Dates.Months.March">
            <summary>
            Represents the calendar month March
            </summary>
        </member>
        <member name="F:PW.Dates.Months.April">
            <summary>
            Represents the calendar month April
            </summary>
        </member>
        <member name="F:PW.Dates.Months.May">
            <summary>
            Represents the calendar month May
            </summary>
        </member>
        <member name="F:PW.Dates.Months.June">
            <summary>
            Represents the calendar month June
            </summary>
        </member>
        <member name="F:PW.Dates.Months.July">
            <summary>
            Represents the calendar month July
            </summary>
        </member>
        <member name="F:PW.Dates.Months.August">
            <summary>
            Represents the calendar month August
            </summary>
        </member>
        <member name="F:PW.Dates.Months.September">
            <summary>
            Represents the calendar month September
            </summary>
        </member>
        <member name="F:PW.Dates.Months.October">
            <summary>
            Represents the calendar month October
            </summary>
        </member>
        <member name="F:PW.Dates.Months.November">
            <summary>
            Represents the calendar month November
            </summary>
        </member>
        <member name="F:PW.Dates.Months.December">
            <summary>
            Represents the calendar month December
            </summary>
        </member>
        <member name="T:PW.Diagnostics.CodeTimer">
            <summary>
            Very basic code timer. Wrap code in a 'using(new CodeTimer("timer-name"))' block
            Elapsed time is written to Trace (output window) when the instance is disposed
            </summary>
        </member>
        <member name="P:PW.Diagnostics.CodeTimer.Ticks">
            <summary>
            A <see cref="T:System.TimeSpan"/> representing the number of ticks that elapsed between instance creation and the subsequent call to <see cref="M:PW.Diagnostics.CodeTimer.Stop"/>, or object disposal.
            </summary>
        </member>
        <member name="P:PW.Diagnostics.CodeTimer.Name">
            <summary>
            An optional name to be assigned to the timer instance.
            </summary>
        </member>
        <member name="M:PW.Diagnostics.CodeTimer.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:PW.Diagnostics.CodeTimer.Dispose">
            <summary>
            Stops the timer. Does not actually dispose anything. Useful to using the timer in a 'using' block.
            </summary>
        </member>
        <member name="M:PW.Diagnostics.CodeTimer.Stop">
            <summary>
            Stops the timer.
            </summary>
        </member>
        <member name="T:PW.Diagnostics.ProcessExtensions">
            <summary>
            Extension methods for <see cref="T:System.Diagnostics.Process"/>
            </summary>
        </member>
        <member name="M:PW.Diagnostics.ProcessExtensions.WaitForExitAsync(System.Diagnostics.Process,System.Threading.CancellationToken)">
            <summary>
            Waits asynchronously for the process to exit. Polling interval is 1 second.
            </summary>
        </member>
        <member name="M:PW.Diagnostics.ProcessExtensions.WaitForExitAsync(System.Diagnostics.Process,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Waits asynchronously for the process to exit, with the specified polling interval.
            </summary>
        </member>
        <member name="T:PW.EventArgs`1">
            <summary>
            Adds a payload to the standard <see cref="T:System.EventArgs"/> class.
            </summary>  
        </member>
        <member name="M:PW.EventArgs`1.#ctor(`0)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="payload"></param>
        </member>
        <member name="P:PW.EventArgs`1.Payload">
            <summary>
            Payload carried by the event.
            </summary>
        </member>
        <member name="T:PW.ExceptionFactory">
            <summary>
            Exception factory
            </summary>
        </member>
        <member name="M:PW.ExceptionFactory.FileNotFoundException(System.String)">
            <summary>
            Creates a new <see cref="T:System.IO.FileNotFoundException"/>
            </summary>
        </member>
        <member name="M:PW.ExceptionFactory.FileNotFoundException(PW.IO.FileSystemObjects.FilePath)">
            <summary>
            Creates a new <see cref="T:System.IO.FileNotFoundException"/>
            </summary>
        </member>
        <member name="M:PW.ExceptionFactory.FileNotFoundException(System.IO.FileInfo)">
            <summary>
            Creates a new <see cref="T:System.IO.FileNotFoundException"/>
            </summary>
        </member>
        <member name="M:PW.ExceptionFactory.Win32Exception(System.Int32)">
            <summary>
            Creates a new <see cref="T:System.ComponentModel.Win32Exception"/> using the specified error code.
            </summary>
        </member>
        <member name="M:PW.ExceptionFactory.Win32Exception">
            <summary>
            Creates a new <see cref="T:System.ComponentModel.Win32Exception"/> using the error code from the last Win32 error.
            </summary>
        </member>
        <member name="T:PW.FailFast.AssertionException">
            <summary>
            Thrown for failed <see cref="T:PW.FailFast.Assert"/>
            </summary>
        </member>
        <member name="M:PW.FailFast.AssertionException.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:PW.FailFast.AssertionException.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:PW.FailFast.AssertionException.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="methodName"></param>
            <param name="message"></param>
        </member>
        <member name="M:PW.FailFast.AssertionException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="methodName"></param>
            <param name="message"></param>
            <param name="inner"></param>
        </member>
        <member name="M:PW.FailFast.AssertionException.#ctor(System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:PW.FailFast.AssertionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:PW.FailFast.AssertionException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implementation of <see cref="M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>.
            </summary>
        </member>
        <member name="T:PW.FailFast.Assert">
            <summary>
            Throws <see cref="T:PW.FailFast.AssertionException"/> when assertions fail. For many, the inner-exception will be a more specific exception.
            Will also throw <see cref="T:System.ArgumentNullException"/> if the supplied argument(s) are null.
            Note that, unlike with <see cref="M:System.Diagnostics.Debug.Assert(System.Boolean)"/>, methods of this class will still be executed in a release build.
            </summary>
        </member>
        <member name="M:PW.FailFast.Assert.Exists(System.IO.FileInfo)">
            <summary>
            Throws exception if the file does not exist
            </summary>    
        </member>
        <member name="M:PW.FailFast.Assert.Exists(System.IO.DirectoryInfo)">
            <summary>
            Throws exception if the directory does not exist
            </summary>    
        </member>
        <member name="M:PW.FailFast.Assert.IsTrue(System.Boolean,System.String)">
            <summary>
            Throws exception if <paramref name="condition"/> is false.
            </summary>
        </member>
        <member name="M:PW.FailFast.Assert.IsFalse(System.Boolean,System.String)">
            <summary>
            Throws <see cref="T:PW.FailFast.AssertionException"/> if <paramref name="condition"/> is true.
            </summary>
        </member>
        <member name="M:PW.FailFast.Assert.IsNotNull``1(``0,System.String)">
            <summary>
            Throws exception is <paramref name="o"/> is null.
            </summary>    
        </member>
        <member name="M:PW.FailFast.Assert.IsNull``1(``0,System.String)">
            <summary>
            Throws <see cref="T:System.ArgumentException"/> if <paramref name="o"/> is not null.
            </summary>
        </member>
        <member name="T:PW.FailFast.Guard">
            <summary>
            Guard class for argument validation, such as null-checking etc.
            </summary>
        </member>
        <member name="M:PW.FailFast.Guard.IsOfType``1(System.Object,System.String)">
            <summary>
            Guards against invalid object type. 
            Throws an exception if <paramref name="argument"/> is not of type <typeparamref name="T"/>
            </summary>
        </member>
        <member name="M:PW.FailFast.Guard.NotNull``1(``0,System.String)">
            <summary>
            Guard against null reference arguments etc. Example usage: <code>obj.GuardNull(nameof(obj))</code>
            Throws <see cref="T:System.ArgumentNullException"/> if <paramref name="argument"/> is null.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="argument">The instance variable to be null-guarded.</param>
            <param name="argumentName">Name of the argument in code. Use nameof() to pass this string.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:PW.FailFast.Guard.NoNulls``1(System.Collections.Generic.ICollection{``0},System.String)">
            <summary>
            Throws <see cref="T:System.Exception"/> is the collection contains any null items.
            </summary>
        </member>
        <member name="M:PW.FailFast.Guard.False(System.Boolean,System.String,System.String)">
            <summary>
            Throws <see cref="T:System.ArgumentException"/> if <paramref name="argumentTest"/> is true.
            </summary>
        </member>
        <member name="M:PW.FailFast.Guard.True(System.Boolean,System.String,System.String)">
            <summary>
            Throws <see cref="T:System.ArgumentException"/> if <paramref name="argumentTest"/> is false.
            </summary>
        </member>
        <member name="M:PW.FailFast.Guard.True(System.Boolean,System.String)">
            <summary>
            Throws <see cref="T:System.ArgumentException"/> if <paramref name="argumentTest"/> is false.
            </summary>
        </member>
        <member name="M:PW.FailFast.Guard.NotNullOrWhitespace(System.String,System.String)">
            <summary>
            Throws <see cref="T:System.ArgumentException"/> if <paramref name="argument"/> is null or white-space.
            </summary>
        </member>
        <member name="M:PW.FailFast.Guard.GreaterThanZero(System.Int32,System.String)">
            <summary>
            Throws <see cref="T:System.ArgumentException"/> if <paramref name="argument"/> is not greater than zero.
            </summary>
        </member>
        <member name="M:PW.FailFast.Guard.GreaterThan(System.Int32,System.Int32,System.String)">
            <summary>
            Throws <see cref="T:System.ArgumentException"/> if <paramref name="argument"/> is not greater than zero.
            </summary>
        </member>
        <member name="M:PW.FailFast.Guard.GreaterThanOrEqualTo(System.Int32,System.Int32,System.String)">
            <summary>
            Throws <see cref="T:System.ArgumentException"/> if <paramref name="argument"/> is not greater than zero.
            </summary>
        </member>
        <member name="M:PW.FailFast.Guard.ZeroOrGreater(System.Int32,System.String)">
            <summary>
            Throws <see cref="T:System.ArgumentException"/> if <paramref name="argument"/> is not zero or greater.
            </summary>
        </member>
        <member name="M:PW.FailFast.Guard.MustExist(System.IO.DirectoryInfo,System.String)">
            <summary>
            Ensures that <paramref name="directory"/> is not null and that it exists.
            </summary>
        </member>
        <member name="M:PW.FailFast.Guard.MustExist(PW.IO.FileSystemObjects.DirectoryPath,System.String)">
            <summary>
            Ensures that <paramref name="directory"/> is not null and that it exists.
            </summary>
        </member>
        <member name="M:PW.FailFast.Guard.MustExist(System.IO.FileInfo,System.String)">
            <summary>
            Ensures that <paramref name="file"/> is not null and that it exists.
            </summary>
        </member>
        <member name="M:PW.FailFast.Guard.MustExist(PW.IO.FileSystemObjects.FilePath,System.String)">
            <summary>
            Ensures that <see cref="T:PW.IO.FileSystemObjects.FilePath"/> is not null and that the file it exists on disk.
            </summary>
        </member>
        <member name="M:PW.FailFast.Guard.MustExist(System.IO.FileSystemInfo,System.String)">
            <summary>
            Ensures that <paramref name="o"/> is not null and that it exists.
            </summary>
        </member>
        <member name="T:PW.FailFast.ValidatedNotNullAttribute">
            <summary>
            Add to methods that check input for null and throw if the input is null.
            Prevents 'CA1062: Validate arguments of public methods' warning for arguments.
            </summary>
        </member>
        <member name="T:PW.Exceptions.InvalidFileNameException">
            <summary>
            File name is invalid.
            </summary>
        </member>
        <member name="M:PW.Exceptions.InvalidFileNameException.#ctor(System.String)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:PW.Exceptions.InvalidFileNameException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:PW.Exceptions.InvalidFileNameException.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:PW.Exceptions.InvalidFileNameException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="T:PW.Exceptions.NullableReferenceNotInstantiatedException">
            <summary>
            Thrown when attempting to access a nullable reference and finding it to be null.
            </summary>
        </member>
        <member name="M:PW.Exceptions.NullableReferenceNotInstantiatedException.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="referenceName"></param>
        </member>
        <member name="P:PW.Exceptions.NullableReferenceNotInstantiatedException.ReferenceName">
            <summary>
            
            </summary>
        </member>
        <member name="P:PW.Exceptions.NullableReferenceNotInstantiatedException.Message">
            <summary>
            
            </summary>
        </member>
        <member name="M:PW.Exceptions.NullableReferenceNotInstantiatedException.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:PW.Exceptions.NullableReferenceNotInstantiatedException.#ctor(System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:PW.Exceptions.NullableReferenceNotInstantiatedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="streamingContext"></param>
        </member>
        <member name="M:PW.Exceptions.NullableReferenceNotInstantiatedException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            GetObjectData
            </summary>
        </member>
        <member name="T:PW.Extensions.ArrayExtensions">
            <summary>
            Extension methods for use with arrays.
            </summary>
        </member>
        <member name="M:PW.Extensions.ArrayExtensions.SequenceEquals(System.Byte[],System.Byte[])">
            <summary>
            Compares two byte arrays for sequence equality. If either of the arrays is null then the result will be false.
            </summary>
        </member>
        <member name="M:PW.Extensions.ArrayExtensions.ToMatrix(System.Byte[])">
            <summary>
            Transforms the vector (1D array) into a matrix (2D array). 
            The returned matrix will have the same length for both dimensions (square).
            Therefore the length of the input vector must have a perfect square-root.
            </summary>
            <exception cref="T:System.ArgumentNullException">The input vector is null.</exception>
            <exception cref="T:PW.FailFast.AssertionException">The input vector length does not have a perfect square-root.</exception>
        </member>
        <member name="M:PW.Extensions.ArrayExtensions.ToVector(System.Byte[0:,0:])">
            <summary>
            Transforms (flattens) the input matrix (2D array) into a vector (1D array).
            </summary>
        </member>
        <member name="M:PW.Extensions.ArrayExtensions.Dimensions``1(``0[0:,0:])">
            <summary>
            Returns both the dimensions of a matrix (2D array) as a size.
            </summary>
        </member>
        <member name="M:PW.Extensions.ArrayExtensions.Bounds``1(``0[0:,0:])">
            <summary>
            Returns the upper bound of both dimensions of a matrix (2D array) as a size.
            </summary>
        </member>
        <member name="M:PW.Extensions.ArrayExtensions.Prepend``1(``0[],``0,System.Int32)">
            <summary>
            Prepends <paramref name="item"/> to <paramref name="source"/> 
            and returns a new array with a maximum length of <paramref name="maxItems"/>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The existing array to which <paramref name="item"/> is prepended.</param>
            <param name="item">Item to prepend.</param>
            <param name="maxItems">Maximum length of resulting array. -1 (default) means all items.</param>
            <returns></returns>
        </member>
        <member name="M:PW.Extensions.ArrayExtensions.Segment``1(``0[],System.Int32)">
            <summary>
            Splits an array into multiple enumerations.
            </summary>
            <typeparam name="T">The type of the array.</typeparam>
            <param name="array">The array to split.</param>
            <param name="segmentSize">The size of the smaller arrays.</param>
            <returns>An array containing smaller arrays.</returns>
        </member>
        <member name="T:PW.Extensions.CharExtensions">
            <summary>
            Extension methods for use with chars.
            </summary>
        </member>
        <member name="M:PW.Extensions.CharExtensions.Concat(System.Collections.Generic.IEnumerable{System.Char})">
            <summary>
            Converts an enumeration of chars in to a string.
            </summary>
        </member>
        <member name="M:PW.Extensions.CharExtensions.AsString(System.Collections.Generic.IEnumerable{System.Char})">
            <summary>
            Converts an enumeration of chars in to a string.
            </summary>
        </member>
        <member name="T:PW.Extensions.EnumExtensions">
            <summary>
            Extension methods for Enums
            </summary>
        </member>
        <member name="M:PW.Extensions.EnumExtensions.Description(System.Enum)">
            <summary>
            Returns the <see cref="T:System.ComponentModel.DescriptionAttribute"/> value for the supplied <see cref="T:System.Enum"/>, or <see cref="F:System.String.Empty"/> if none is found.
            </summary>
        </member>
        <member name="M:PW.Extensions.EnumExtensions.DisplayName(System.Enum)">
            <summary>
            Formats enum string for display by inserting a space before each upper-case character.
            </summary>
        </member>
        <member name="T:PW.Extensions.ExceptionExtensions">
            <summary>
            Various helper methods for use with <see cref="T:System.Exception"/> objects.
            </summary>
        </member>
        <member name="M:PW.Extensions.ExceptionExtensions.EnumerateExceptions(System.Exception,System.Boolean)">
            <summary>
            Returns the exception and all inner-exceptions. To exclude the top-level exception, set <paramref name="includeTopLevel"/> to false.
            </summary>
        </member>
        <member name="M:PW.Extensions.ExceptionExtensions.EnumerateMessages(System.Exception,System.Boolean)">
            <summary>
            Returns all exception messages, going down the stack.
            </summary>
        </member>
        <member name="T:PW.Extensions.GenericExtensions">
            <summary>
            Generic extension methods.
            </summary>
        </member>
        <member name="M:PW.Extensions.GenericExtensions.Toggle``1(``0,``0,``0)">
            <summary>
            Switches (toggles) the value <paramref name="current"/> <typeparamref name="T"/> between two values of <paramref name="one"/> and <paramref name="other"/>
            </summary>
        </member>
        <member name="T:PW.Extensions.ICollectionExtensions">
            <summary>
            ICollection extension methods.
            </summary>
        </member>
        <member name="M:PW.Extensions.ICollectionExtensions.ContainsNulls``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Returns true if any elements in the sequence are null.
            </summary>
        </member>
        <member name="M:PW.Extensions.ICollectionExtensions.RemoveAllIgnoreCase(System.Collections.Generic.ICollection{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Removes all strings from <paramref name="first"/> that are in <paramref name="second"/> and returns the number of strings removed.
            </summary>
        </member>
        <member name="M:PW.Extensions.ICollectionExtensions.RemoveAll``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Removes all elements from <paramref name="first"/> that are in <paramref name="second"/> and returns the number of elements removed.
            </summary>
        </member>
        <member name="M:PW.Extensions.ICollectionExtensions.RemoveAll``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Removes all elements from <paramref name="first"/> that are in <paramref name="second"/> and returns the number of elements removed.
            </summary>
        </member>
        <member name="T:PW.Extensions.IEnumerableExtensions">
            <summary>
            Extension methods for use with IEnumerable.
            </summary>
        </member>
        <member name="M:PW.Extensions.IEnumerableExtensions.Enquote(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Encloses each string in the sequence within quotation marks.
            </summary>
        </member>
        <member name="M:PW.Extensions.IEnumerableExtensions.FindDuplicateCounts``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Returns a dictionary of duplicates which match <paramref name="keySelector"/>.
            </summary>
        </member>
        <member name="M:PW.Extensions.IEnumerableExtensions.FindDuplicates``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Returns groups of duplicates which match <paramref name="keySelector"/>
            </summary>
        </member>
        <member name="M:PW.Extensions.IEnumerableExtensions.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Returns either the first item from the list or, if that is null, <paramref name="defaultValue"/>.
            </summary>
        </member>
        <member name="M:PW.Extensions.IEnumerableExtensions.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},``0)">
            <summary>
            Returns either the first item from the list or, if that is null, <paramref name="defaultValue"/>.   
            </summary>
        </member>
        <member name="M:PW.Extensions.IEnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Performs <paramref name="action"/> or each item in <paramref name="seq"/>.
            </summary>
        </member>
        <member name="M:PW.Extensions.IEnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0})">
            <summary>
            Performs <paramref name="f"/> for each item in <paramref name="seq"/>
            </summary>
        </member>
        <member name="M:PW.Extensions.IEnumerableExtensions.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Performs <paramref name="f"/> for each item in <paramref name="seq"/>
            </summary>
        </member>
        <member name="M:PW.Extensions.IEnumerableExtensions.Join(System.Collections.Generic.IEnumerable{System.String},System.String,System.Boolean)">
            <summary>
            Returns a single string containing each string in the sequence separated by the specified separator.
            </summary>
        </member>
        <member name="M:PW.Extensions.IEnumerableExtensions.Join(System.Collections.Generic.IEnumerable{System.String},System.Char,System.Boolean)">
            <summary>
            Returns a single string containing each string in the sequence separated by the specified separator.
            </summary>
        </member>
        <member name="M:PW.Extensions.IEnumerableExtensions.JoinWithCommas(System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Returns a single string containing each string in the sequence separated by a comma.
            </summary>
        </member>
        <member name="M:PW.Extensions.IEnumerableExtensions.JoinWithSpaces(System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Returns a single string containing each string in the sequence separated by a space.
            </summary>
        </member>
        <member name="M:PW.Extensions.IEnumerableExtensions.NaturalOrder(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Performs a natural ascending ordering.
            </summary>
        </member>
        <member name="M:PW.Extensions.IEnumerableExtensions.NaturalOrder(System.Collections.Generic.IEnumerable{System.String},PW.SortOrder)">
            <summary>
            Performs the specified natural ordering.
            </summary>
        </member>
        <member name="M:PW.Extensions.IEnumerableExtensions.NaturalOrderDescending(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Performs a natural descending ordering.
            </summary>
        </member>
        <member name="M:PW.Extensions.IEnumerableExtensions.None``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Opposite of <see cref="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})"/>
            </summary>
        </member>
        <member name="M:PW.Extensions.IEnumerableExtensions.None``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Opposite of <see cref="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})"/>
            </summary>
        </member>
        <member name="M:PW.Extensions.IEnumerableExtensions.RepeatEach``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Returns a new sequence where each element in <paramref name="seq"/> is repeated <paramref name="count"/> times.
            </summary>
        </member>
        <member name="M:PW.Extensions.IEnumerableExtensions.SkipNulls``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Skips over any nulls found within the sequence.
            </summary>
        </member>
        <member name="M:PW.Extensions.IEnumerableExtensions.Trim(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Trims white-space from each string in the enumeration. Employs Deferred Execution with Lazy Evaluation
            </summary>
        </member>
        <member name="M:PW.Extensions.IEnumerableExtensions.TrimEnd(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Trims trailing white-space from each string in the enumeration. Employs Deferred Execution with Lazy Evaluation
            </summary>
        </member>
        <member name="M:PW.Extensions.IEnumerableExtensions.TrimStart(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Trims leading white-space from each string in the enumeration. Employs Deferred Execution with Lazy Evaluation
            </summary>
        </member>
        <member name="T:PW.Extensions.IGroupingExtensions">
            <summary>
            Extensions methods for IGrouping interface.
            </summary>
        </member>
        <member name="M:PW.Extensions.IGroupingExtensions.LargerThan``2(System.Collections.Generic.IEnumerable{System.Linq.IGrouping{``0,``1}},System.Int32)">
            <summary>
            Where clause: returns those groups with more than <paramref name="count"/> elements.
            </summary>
        </member>
        <member name="M:PW.Extensions.IGroupingExtensions.WithMultipleElements``2(System.Collections.Generic.IEnumerable{System.Linq.IGrouping{``0,``1}})">
            <summary>
            Where clause: returns those groups having more than one element.
            </summary>
        </member>
        <member name="T:PW.Extensions.IListExtensions">
            <summary>
            Extensions methods for <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
        </member>
        <member name="M:PW.Extensions.IListExtensions.Replace``1(System.Collections.Generic.IList{``0},``0,``0)">
            <summary>
            Attempts to replace <paramref name="item"/> with <paramref name="replacement"/>
            </summary>
            <param name="list">Target</param>
            <param name="item">Item to be replaced.</param>
            <param name="replacement">Replacement item.</param>
            <returns>Returns the index of the replaced item, if found, otherwise -1.</returns>
        </member>
        <member name="M:PW.Extensions.IListExtensions.ReplaceFirst``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Boolean},``0)">
            <summary>
            Attempts to replace the first item returned by <paramref name="itemSelector"/> with <paramref name="replacement"/>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="itemSelector"></param>
            <param name="replacement"></param>
            <returns>Returns replaced item, if found by <paramref name="itemSelector"/>, otherwise default(<typeparamref name="T"/>).</returns>
        </member>
        <member name="M:PW.Extensions.IListExtensions.ReplaceFirst``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Boolean},System.Func{``0})">
            <summary>
            Attempts to replace the first item returned by <paramref name="itemSelector"/> with object created by <paramref name="replacement"/>. 
            <paramref name="replacement"/> is only invoked if <paramref name="itemSelector"/> returns a match.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="itemSelector"></param>
            <param name="replacement">Function to create a replacement, only if item is found.</param>
            <returns>Returns replaced item, if found by <paramref name="itemSelector"/>, otherwise default(<typeparamref name="T"/>).</returns>
        </member>
        <member name="T:PW.Extensions.NullSafeExtensions">
            <summary>
            Extension methods for use with objects.
            </summary>
        </member>
        <member name="M:PW.Extensions.NullSafeExtensions.IfNotNull``1(``0,System.Action{``0})">
            <summary>
            If <paramref name="o"/> is not null, performs <paramref name="action"/> using <paramref name="o"/> and returns true. Otherwise returns false.
            </summary>
        </member>
        <member name="M:PW.Extensions.NullSafeExtensions.IfNotNull``1(``0,System.Action)">
            <summary>
            If <paramref name="o"/> is not null, performs <paramref name="action"/> using <paramref name="o"/> and returns true. Otherwise returns false.
            </summary>
        </member>
        <member name="M:PW.Extensions.NullSafeExtensions.IfNotNull``2(``0,System.Func{``0,``1})">
            <summary>
            If <paramref name="o"/> is not null, returns the result of <paramref name="func"/>, otherwise returns default.
            </summary>
            <typeparam name="T">Input type of <paramref name="func"/></typeparam>
            <typeparam name="TR">Return type of <paramref name="func"/></typeparam>
            <param name="o">Object passed to <paramref name="func"/></param>
            <param name="func">Function to perform on <paramref name="o"/></param>
            <returns>Result of <paramref name="func"/>, or default</returns>
        </member>
        <member name="T:PW.Extensions.NumericExtensions">
            <summary>
            Extension methods for numbers.
            </summary>
        </member>
        <member name="M:PW.Extensions.NumericExtensions.ToStringByteSize(System.Int32)">
            <summary>
            Converts a value into a string that represents the number expressed as a size value in bytes, kilobytes, megabytes, or gigabytes, depending on the size.
            </summary>
        </member>
        <member name="M:PW.Extensions.NumericExtensions.ToStringByteSize(System.UInt32)">
            <summary>
            Converts a value into a string that represents the number expressed as a size value in bytes, kilobytes, megabytes, or gigabytes, depending on the size.
            </summary>
        </member>
        <member name="M:PW.Extensions.NumericExtensions.ToStringByteSize(System.Int64)">
            <summary>
            Converts a value into a string that represents the number expressed as a size value in bytes, kilobytes, megabytes, or gigabytes, depending on the size.
            </summary>
        </member>
        <member name="M:PW.Extensions.NumericExtensions.ToStringByteSize(System.UInt64)">
            <summary>
            Converts a value into a string that represents the number expressed as a size value in bytes, kilobytes, megabytes, or gigabytes, depending on the size.
            </summary>
        </member>
        <member name="T:PW.Extensions.ShuffleListExtension">
            <summary>
            Extension methods for shuffling lists.
            </summary>
        </member>
        <member name="M:PW.Extensions.ShuffleListExtension.Shuffle``1(System.Collections.Generic.IList{``0})">
            <summary>
            Performs an in-place shuffle of the items in the list.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
        </member>
        <member name="T:PW.Extensions.StringExtensions">
            <summary>
            Extensions for the <see cref="T:System.String"/> class
            </summary>
        </member>
        <member name="F:PW.Extensions.StringExtensions.EmptyString">
            <summary>
            
            </summary>
        </member>
        <member name="F:PW.Extensions.StringExtensions.Space">
            <summary>
            
            </summary>
        </member>
        <member name="F:PW.Extensions.StringExtensions._upperCamelCaseRegex">
            <summary>
            Backing field for <see cref="P:PW.Extensions.StringExtensions.UpperCamelCaseRegex"/>
            </summary>
        </member>
        <member name="M:PW.Extensions.StringExtensions.Compress(System.String)">
            <summary>
            Compresses the string.
            </summary>
        </member>
        <member name="M:PW.Extensions.StringExtensions.RemoveLastCharacter(System.String)">
            <summary>
            Removes the last character from the end of the string and returns the new string. 
            </summary>
        </member>
        <member name="M:PW.Extensions.StringExtensions.RemoveNumbersFromEnd(System.String)">
            <summary>
            Removes any numbers from just the end of the string. If the string is all numbers an empty string will be returned.
            </summary>
        </member>
        <member name="M:PW.Extensions.StringExtensions.NumbersFromStart(System.String)">
            <summary>
            Returns just the numbers from the start of the string, up to the first non-numeric character.
            </summary>
        </member>
        <member name="M:PW.Extensions.StringExtensions.ContainsAnyNumber(System.String)">
            <summary>
            If any character within <paramref name="str"/> is a number returns true, otherwise returns false.
            </summary>
        </member>
        <member name="M:PW.Extensions.StringExtensions.TristateInvoke``1(System.String,System.Func{System.String,``0},``0)">
            <summary>
            Returns <paramref name="func"/>(<paramref name="str"/>) when <paramref name="str"/> is not null or zero-length. 
            Throws is <paramref name="str"/> is null. 
            Returns <paramref name="resultForEmptyString"/> is <paramref name="str"/> is zero-length.
            </summary>
        </member>
        <member name="M:PW.Extensions.StringExtensions.EndsWithNumber(System.String)">
            <summary>
            Returns true if the last character in <paramref name="str"/> is a number, otherwise returns false.
            </summary>
        </member>
        <member name="M:PW.Extensions.StringExtensions.StartsWithNumber(System.String)">
            <summary>
            Returns true if the first character of <paramref name="str"/> is a number, otherwise false.
            </summary>
        </member>
        <member name="M:PW.Extensions.StringExtensions.StartsWithAny(System.String,System.Collections.Generic.IEnumerable{System.String},System.StringComparison)">
            <summary>
            Determines whether <paramref name="str"/> starts with any of the strings in <paramref name="values"/>.
            </summary>
        </member>
        <member name="M:PW.Extensions.StringExtensions.EndWithExactly(System.String,System.String)">
            <summary>
            Tests whether the <paramref name="str"/> ends with <paramref name="value"/>, as an ordinal comparison, ignoring case.
            </summary>
        </member>
        <member name="M:PW.Extensions.StringExtensions.SpaceDelimitCapitals(System.String)">
            <summary>
            Inserts a space before each capital letter, other than the first. Useful for converting enums, class names etc. to a 'display' string.
            </summary>
            <example>"NameOfSomething".SpaceDelimitCapitals() => "Name Of Something"/></example>
        </member>
        <member name="M:PW.Extensions.StringExtensions.ToTitleCase(System.String)">
            <summary>
            Converts the specified string to title case (except for words that are entirely
            in uppercase, which are considered to be acronyms).
            </summary>
        </member>
        <member name="M:PW.Extensions.StringExtensions.ToTitleCase(System.String,System.Boolean)">
            <summary>
            Converts the specified string to title case. If <paramref name="text"/> is all capitals, set <paramref name="isAllCaps"/> to true.
            </summary>
        </member>
        <member name="M:PW.Extensions.StringExtensions.Enquote(System.String)">
            <summary>
            Wraps the string in quotations.
            </summary>
        </member>
        <member name="M:PW.Extensions.StringExtensions.IsEnquoted(System.String)">
            <summary>
            Determines if the string starts and ends with a quotation mark.
            </summary>
        </member>
        <member name="M:PW.Extensions.StringExtensions.Unenquote(System.String)">
            <summary>
            If the string is enclosed in quotes, then returns the string from within the quotes
            </summary>
        </member>
        <member name="M:PW.Extensions.StringExtensions.EnsureEndsWith(System.String,System.Char)">
            <summary>
            Appends char <paramref name="c"/> to the end of the string if it does not already exist.
            </summary>
        </member>
        <member name="M:PW.Extensions.StringExtensions.EnsureEndsWith(System.String,System.String)">
            <summary>
            Appends <paramref name="suffix"/> to the end of the string if it does not already exist.
            </summary>
        </member>
        <member name="M:PW.Extensions.StringExtensions.EnsureEndsWithSpace(System.String)">
            <summary>
            Appends a space to the string if it does not already end with a space.
            </summary>
        </member>
        <member name="M:PW.Extensions.StringExtensions.IsEmpty(System.String)">
            <summary>
            Returns true if the string is zero length, false if it has a length. Throws an exception if it is null.
            </summary>
            <param name="str"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:PW.Extensions.StringExtensions.IsNullOrEmpty(System.String)">
            <summary>
            Checks if the string is null or empty.
            </summary>
        </member>
        <member name="M:PW.Extensions.StringExtensions.IsNullOrWhiteSpace(System.String)">
            <summary>
            Checks is the string is null, empty or white-space.
            </summary>
        </member>
        <member name="M:PW.Extensions.StringExtensions.IsWhiteSpace(System.String)">
            <summary>
            Returns true when the string consists of only white-space characters. Returns false for null or empty string.
            </summary>
        </member>
        <member name="M:PW.Extensions.StringExtensions.IsWhiteSpace(System.String,System.Int32)">
            <summary>
            Returns true when the string consists of only white-space characters. Returns false if string is null or empty.
            Skips the first <paramref name="skip"/> chars.
            If <paramref name="skip"/> is greater or equal to the length of the string, then returns false.
            </summary>
            <param name="value">this</param>
            <param name="skip">Optionally skip the first N characters.</param>
            <returns></returns>
        </member>
        <member name="M:PW.Extensions.StringExtensions.IsAll(System.String,System.Char)">
            <summary>
            Returns true when all character in the sting are <paramref name="c"/>. Returns false if string is null or empty.
            </summary>
        </member>
        <member name="M:PW.Extensions.StringExtensions.CountOf(System.String,System.Char)">
            <summary>
            Returns the count of character <paramref name="c"/> within the string <paramref name="str"/>
            </summary>
        </member>
        <member name="M:PW.Extensions.StringExtensions.IsAllNumbers(System.String)">
            <summary>
            Determines whether the string is composed only of numeric digits.
            </summary>
        </member>
        <member name="M:PW.Extensions.StringExtensions.ContainsIgnoreCase(System.String,System.String)">
            <summary>
            Returns bool whether str2 is contained within str1. Ordinal case-insensitive comparison is used.
            </summary>
        </member>
        <member name="M:PW.Extensions.StringExtensions.Contains(System.String,System.String,System.StringComparison)">
            <summary>
            Returns bool whether str2 is contained within str1. Allows choice of string comparison method.
            </summary>
        </member>
        <member name="M:PW.Extensions.StringExtensions.ContainsAny(System.String,System.Char[])">
            <summary>
            Returns true if <paramref name="str1"/> contains any of the characters in <paramref name="chars"/>.
            </summary>
        </member>
        <member name="M:PW.Extensions.StringExtensions.ContainsChar(System.String,System.Char)">
            <summary>
            Determines whether the character is contained within the string.
            </summary>
        </member>
        <member name="M:PW.Extensions.StringExtensions.StartsWith(System.String,System.Char)">
            <summary>
            Determines whether a specified char is a prefix of the current instance.
            </summary>
        </member>
        <member name="M:PW.Extensions.StringExtensions.EndsWith(System.String,System.Char)">
            <summary>
            Determines whether a specified char is a suffix of the current instance.
            </summary>
        </member>
        <member name="M:PW.Extensions.StringExtensions.ContainsHyperlink(System.String)">
            <summary>
            Returns bool whether 'http://' or 'https://' is contained within the string
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:PW.Extensions.StringExtensions.LimitLength(System.String,System.Int32)">
            <summary>
            Returns a limited length version of the string.
            </summary>
        </member>
        <member name="M:PW.Extensions.StringExtensions.SplitOnNewLine(System.String)">
            <summary>
            Splits a string into an array, based on new lines. Empty lines are removed.
            </summary>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:PW.Extensions.StringExtensions.SplitOnNewLine(System.String,System.StringSplitOptions)">
            <summary>
            Splits a string into an array, based on new lines.
            </summary>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:PW.Extensions.StringExtensions.Slice(System.String,System.Int32,System.Int32)">
            <summary>
            Get the string slice between the two indexes.
            Inclusive for start index, exclusive for end index.
            A negative value n for <paramref name="end"/> will omit the last n characters.
            </summary>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentOutOfRangeException">End is greater than string length.</exception>
        </member>
        <member name="M:PW.Extensions.StringExtensions.RemoveAll(System.String,System.String)">
            <summary>
            Returns a copy of the original string with all occurrences of <paramref name="subString"/> removed.
            </summary>
        </member>
        <member name="M:PW.Extensions.StringExtensions.RemoveAll(System.String,System.Char)">
            <summary>
            Removes all instances of <see cref="T:System.Char"/> <paramref name="c"/> from the string.
            </summary>
        </member>
        <member name="M:PW.Extensions.StringExtensions.ResultOfSubstringBetween(System.String,System.String,System.String,System.StringComparison,System.Int32,System.String,System.String)">
            <summary>
            Returns the substring between the locations of str1 and str2, within the source string.
            </summary>
        </member>
        <member name="M:PW.Extensions.StringExtensions.SubstringBetween(System.String,System.String,System.String,System.StringComparison,System.Int32,System.String)">
            <summary>
            Returns the substring between the locations of str1 and str2, within the source string.
            </summary>
            <param name="source">The string to parse</param>
            <param name="str1">Return string between this...</param>
            <param name="str2">...and this</param>
            <param name="comparisonType">String comparison type.</param>
            <param name="startIndex">Offset from the beginning at which to start parsing.</param>
            <param name="defaultValue">Returned when <paramref name="str1"/> or <paramref name="str2"/> is not found. Can be null.</param>
            <returns></returns>
        </member>
        <member name="M:PW.Extensions.StringExtensions.IsUrl(System.String)">
            <summary>
            Checks whether the string starts with either 'https://' or 'http://'. Throws <see cref="T:System.ArgumentNullException"/>.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:PW.Extensions.StringExtensions.ReadLines(System.String)">
            <summary>
            Enumerates a string as a series of lines.
            </summary>
        </member>
        <member name="M:PW.Extensions.StringExtensions.SubstringAfterLast(System.String,System.Char)">
            <summary>
            Return a substring after the last instance of the specified character. If the character is not found the original string is returned.
            </summary>
            <param name="str"></param>
            <param name="c"></param>
            <returns></returns>
            <remarks>If original string is nothing, returns nothing. If original string's length is zero, returns String.Empty. If c is not found, returns the original string.</remarks>
        </member>
        <member name="M:PW.Extensions.StringExtensions.ToIntOrDefault(System.String,System.Int32)">
            <summary>
            Attempts to convert <paramref name="str"/> to an <see cref="T:System.Int32"/>. If convertion is not possible <paramref name="defaultValue"/> is returned.
            </summary>
        </member>
        <member name="M:PW.Extensions.StringExtensions.ZeroPaddedLength(System.String)">
            <summary>
            If the string contains leading-zeros, returns the length of the string, otherwise zero.
            This seems quite naff. [Sometime much later...] Indeed it does!
            </summary>
        </member>
        <member name="M:PW.Extensions.StringExtensions.MatchZeroPadding(System.String,System.String)">
            <summary>
            If <paramref name="matchTo"/> has leading-zero padding, then <paramref name="str"/> is padded to the same length, otherwise <paramref name="str"/>
            is returned as-is.
            </summary>
            <param name="str">The string to possibly be leading-zero padded.</param>
            <param name="matchTo">The string to match against to determine whether to pad <paramref name="str"/>.</param>
            <returns></returns>
        </member>
        <member name="T:PW.FlagAutoReset">
            <summary>
            Use to set a bool flag in a using-block, for example 'don't fire event for the moment...' Flag is flipped back when disposed.
            Ensures flag value is restored in the event of an exception.
            </summary>
        </member>
        <member name="M:PW.FlagAutoReset.System#IDisposable#Dispose">
            <summary>
            Flip the flag state when token is released.
            </summary>
        </member>
        <member name="T:PW.Flag">
            <summary>
            A class which acts as a wrapper for a bool-flag and additionally provides a mechanism to automatically set/unset the flag in a using block.
            </summary>
        </member>
        <member name="P:PW.Flag.Value">
            <summary>
            The value of the flag
            </summary>
        </member>
        <member name="M:PW.Flag.op_Implicit(PW.Flag)~System.Boolean">
            <summary>
            Converts flag -> bool
            </summary>
            <param name="flag"></param>
        </member>
        <member name="M:PW.Flag.op_Implicit(System.Boolean)~PW.Flag">
            <summary>
            Creates a new <see cref="T:PW.Flag"/> instance with the specified value.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:PW.Flag.ToString">
            <summary>
            Returns <see cref="P:PW.Flag.Value"/> as string.
            </summary>
            <returns></returns>
        </member>
        <member name="P:PW.Flag.IsSet">
            <summary>
            Whether the <see cref="T:PW.Flag"/> is set to true.
            </summary>
        </member>
        <member name="M:PW.Flag.CreateAutoResetToken(System.Boolean)">
            <summary>
            Creates a disposable 'token' which sets and resets the flag within a using block or Try-Finally block.
            </summary>
            <param name="value">The value for the flag while the token is in use. 
            This is then toggled when the token is disposed.</param>
        </member>
        <member name="T:PW.Functional.Disposable">
            <summary>
            Extension methods for working with disposable objects in a functional manor.
            </summary>
        </member>
        <member name="M:PW.Functional.Disposable.DisposeAfter``2(``0,System.Func{``0,``1})">
            <summary>
            Disposes object <paramref name="disposable"/> after performing operation <paramref name="func"/>.
            </summary>
        </member>
        <member name="M:PW.Functional.Disposable.DisposeAfter``1(``0,System.Action{``0})">
            <summary>
            Disposes object <paramref name="disposable"/> after performing operation <paramref name="action"/>.
            </summary>
        </member>
        <member name="M:PW.Functional.Disposable.Using``2(``0,System.Func{``0,``1})">
            <summary>
            Executes <paramref name="func"/> and disposes <paramref name="disposable"/>
            </summary>
        </member>
        <member name="M:PW.Functional.Disposable.Using``1(``0,System.Action{``0})">
            <summary>
            Executes <paramref name="action"/> and disposes <paramref name="disposable"/>
            </summary>
        </member>
        <member name="M:PW.Functional.Disposable.Using``2(System.Func{``0},System.Func{``0,``1})">
            <summary>
            Creates a disposable object using <paramref name="factory"/> and performs <paramref name="func"/> on it, before disposing.
            </summary>
        </member>
        <member name="M:PW.Functional.Disposable.Using``1(System.Func{``0},System.Action{``0})">
            <summary>
            Creates a disposable object using <paramref name="factory"/> and performs <paramref name="action"/> on it, before disposing.
            </summary>
        </member>
        <member name="M:PW.Functional.Disposable.UsingAsync``2(System.Func{``0},System.Func{``0,System.Threading.Tasks.Task{``1}})">
            <summary>
            Creates a disposable object using <paramref name="factory"/> and performs the async <paramref name="func"/> on it, before disposing.
            </summary>
        </member>
        <member name="M:PW.Functional.Disposable.UsingAsync``1(System.Func{``0},System.Func{``0,System.Threading.Tasks.Task})">
            <summary>
            Creates a disposable object using <paramref name="factory"/> and performs the async <paramref name="action"/> on it, before disposing.
            </summary>
        </member>
        <member name="T:PW.Functional.FuncExtensions">
            <summary>
            Extension methods for use with Func.
            </summary>
        </member>
        <member name="M:PW.Functional.FuncExtensions.Then``3(System.Func{``0,``1},System.Func{``1,``2})">
            <summary>
            Composes (chains) two functions. E.g. val = f1.Then(f2);
            </summary>
            <typeparam name="T">Type of input to function <paramref name="f1"/></typeparam>
            <typeparam name="TR1">Return type of function <paramref name="f1"/> and input type of function <paramref name="f2"/></typeparam>
            <typeparam name="TR2">Return type of function <paramref name="f2"/></typeparam>
            <param name="f1">Function 1</param>
            <param name="f2">Function 2</param>
            <returns></returns>
        </member>
        <member name="M:PW.Functional.FuncExtensions.Pipe``2(System.Func{``0},System.Func{``0,``1})">
            <summary>
            Pipes the output of a function into the input of the next function.
            </summary>
        </member>
        <member name="M:PW.Functional.FuncExtensions.Pipe``3(System.Func{``0,``1},System.Func{``1,``2})">
            <summary>
            Pipes the output of a function into the input of the next function.
            </summary>
        </member>
        <member name="M:PW.Functional.FuncExtensions.Pipe``4(System.Func{``0,``1,``2},System.Func{``2,``3})">
            <summary>
            Pipes the output of a function into the input of the next function.
            </summary>
        </member>
        <member name="M:PW.Functional.FuncExtensions.ValueOrDefault``1(System.Func{``0})">
            <summary>
            Returns the result of <paramref name="func"/> or default, if it fails.
            </summary>
        </member>
        <member name="M:PW.Functional.FuncExtensions.ValueOrDefault``2(System.Func{``0,``1},``0)">
            <summary>
            Returns the result of <paramref name="func"/> or default, if it fails.
            </summary>
        </member>
        <member name="M:PW.Functional.FuncExtensions.ValueOrDefault``2(``0,System.Func{``0,``1})">
            <summary>
            Returns the result of <paramref name="func"/> or default, if it fails.
            </summary>
        </member>
        <member name="M:PW.Functional.FuncExtensions.ValueOrNoneOrException``1(System.Func{``0})">
            <summary>
            Returns <typeparamref name="T"/> or <see cref="T:PW.Functional.OneOfTypes.None"/> or <see cref="T:System.Exception"/>
            If <paramref name="func"/> returns a value, this returns the value. 
            If <paramref name="func"/> returns null, this returns <see cref="T:PW.Functional.OneOfTypes.None"/>. 
            If <paramref name="func"/> throws an exception, this returns <see cref="T:System.Exception"/>.
            </summary>
        </member>
        <member name="M:PW.Functional.FuncExtensions.ValueOrException``1(System.Func{``0})">
            <summary>
            Returns the value from <paramref name="func"/>, or <see cref="T:System.Exception"/>.
            </summary>
        </member>
        <member name="T:PW.Functional.FuncPipe`1">
            <summary>
            Creates a function which pipes the output of a function into the input of the next function, in a fluent manor.
            </summary>
        </member>
        <member name="M:PW.Functional.FuncPipe`1.To``1(System.Func{`0,``0})">
            <summary>
            Connects the next function to the pipeline.
            </summary>
        </member>
        <member name="T:PW.Functional.FuncPipe`2">
            <summary>
            Creates a function which pipes the output of a function into the input of the next function, in a fluent manor.
            </summary>
        </member>
        <member name="M:PW.Functional.FuncPipe`2.To``1(System.Func{`1,``0})">
            <summary>
            Connects the next function to the pipeline.
            </summary>
        </member>
        <member name="T:PW.Functional.FuncPipeS`1">
            <summary>
            Creates a function which pipes the output of a function into the input of the next function, in a fluent manor.
            The 'S' suffix is simply to prevent a name clash with class <see cref="T:PW.Functional.FuncPipe`1"/>.
            </summary>
        </member>
        <member name="M:PW.Functional.FuncPipeS`1.To(System.Func{`0,`0})">
            <summary>
            Connects the next function to the pipeline.
            </summary>
        </member>
        <member name="T:PW.Functional.FunctionPipeline`1">
            <summary>
            Composes (links together) a list of functions which all have both input and output of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type which each function works with.</typeparam>
        </member>
        <member name="M:PW.Functional.FunctionPipeline`1.#ctor(System.Collections.Generic.IEnumerable{System.Func{`0,`0}})">
            <summary>
            Creates a new instance from the sequence of functions.
            </summary>
            <param name="seq"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException">Thrown if there is a null in <paramref name="seq"/></exception>
        </member>
        <member name="M:PW.Functional.FunctionPipeline`1.Compose(System.Collections.Generic.IList{System.Func{`0,`0}})">
            <summary>
            Static method to link together a series of functions.
            </summary>
        </member>
        <member name="M:PW.Functional.FunctionPipeline`1.Execute(`0)">
            <summary>
            Executes the function pipeline
            </summary>
        </member>
        <member name="T:PW.Functional.WithStatement">
            <summary>
            Extension methods equivalent to the Visual Basic 'With...End With' Statement block.
            </summary>
        </member>
        <member name="M:PW.Functional.WithStatement.With``1(System.Func{``0},System.Action{``0})">
            <summary>
            Equivalent to the Visual Basic 'With...End With' Statement block.
            </summary>
            <typeparam name="T">The type returned by <paramref name="objectExpression"/>.</typeparam>
            <param name="objectExpression">An expression that evaluates to an object of type <typeparamref name="T"/>. The expression may be arbitrarily complex and is evaluated only once. The expression can evaluate to any data type, including elementary types.</param>
            <param name="statements">One or more statements that refer to members of an object that's produced by the evaluation of objectExpression.</param>
        </member>
        <member name="M:PW.Functional.WithStatement.With``1(``0,System.Action{``0})">
            <summary>
            Equivalent to the Visual Basic 'With...End With' Statement block.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="obj">An object of type <typeparamref name="T"/> against which statements are performed.</param>
            <param name="statements">One or more statements that refer to members of the object <paramref name="obj"/>.</param>
        </member>
        <member name="T:PW.Helpers.ConsoleHelper">
            <summary>
            Helper methods for use with <see cref="T:System.Console"/>
            </summary>
        </member>
        <member name="M:PW.Helpers.ConsoleHelper.PromptPushKeyToExit">
            <summary>
            Displays 'Push a key to exit.' then and waits for a key before continuing.
            </summary>  
        </member>
        <member name="M:PW.Helpers.ConsoleHelper.PromptPushKeyToExit(System.String)">
            <summary>
            Displays <paramref name="message"/> and 'Push a key to exit.' then and waits for a key before continuing.
            </summary>  
        </member>
        <member name="M:PW.Helpers.ConsoleHelper.PromptForKey(System.String)">
            <summary>
            Displays prompt message and returns response key as <see cref="T:System.Char"/>.
            </summary>
        </member>
        <member name="M:PW.Helpers.ConsoleHelper.PromptForInput(System.String)">
            <summary>
            Displays prompt message and returns response text as <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:PW.Helpers.ConsoleHelper.ReadPassword(System.String,System.Boolean)">
            <summary>
            Allows user to enter password without displaying it to console.
            </summary>
            <param name="prompt">Text prompt to display, or null for no prompt.</param>
            <param name="showStars">Show * for each character.</param>
            <returns></returns>
        </member>
        <member name="M:PW.Helpers.ConsoleHelper.ReadLineHidden(System.Boolean)">
            <summary>
            Reads a line and either shows nothing or * chars in the console.
            </summary>
            <param name="showStars">Show * for each char or nothing.</param>
            <returns></returns>
        </member>
        <member name="M:PW.Helpers.ConsoleHelper.DeleteLastChar">
            <summary>
            Deletes the last character written by <see cref="M:System.Console.Write(System.Char)"/>
            </summary>
        </member>
        <member name="M:PW.Helpers.ConsoleHelper.WriteLineUnderlined(System.String)">
            <summary>
            Writes a string to the console followed by a line of hyphens of the same length.
            </summary>    
        </member>
        <member name="M:PW.Helpers.ConsoleHelper.WriteNewLines(System.Int32)">
            <summary>
            Writes the specified number of new lines to the console.
            </summary>
        </member>
        <member name="M:PW.Helpers.ConsoleHelper.WriteParagraph(System.String,System.Int32,System.Int32)">
            <summary>
            Writes a string to the console, optional preceded and/or followed by a number of blank lines.
            </summary>
        </member>
        <member name="T:PW.Helpers.EnumHelper">
            <summary>
            Enum helpers
            </summary>
        </member>
        <member name="M:PW.Helpers.EnumHelper.GetValues``1">
            <summary>
            Returns an array of values for the enumeration <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">MUST BE AN ENUM !!</typeparam>
        </member>
        <member name="M:PW.Helpers.EnumHelper.Count``1">
            <summary>
            The count of values in the Enum <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="M:PW.Helpers.EnumHelper.GetDescriptionValueDictionary``1">
            <summary>
            Creates a dictionary containing an Enum's descriptions and values. Any elements without a description are ignored and omitted from the dictionary.
            </summary>
            <typeparam name="T">An enum type.</typeparam>
        </member>
        <member name="T:PW.Helpers.Generic">
            <summary>
            Helper methods for working with generic types.
            </summary>
        </member>
        <member name="M:PW.Helpers.Generic.IsNull``1(``0)">
            <summary>
            Alternative to checking for null on generic types, where the type may or may not be a reference type.
            </summary>
        </member>
        <member name="M:PW.Helpers.Generic.Equals``1(``0,``0)">
            <summary>
            Determines whether two generic types are equal.
            </summary>
        </member>
        <member name="M:PW.Helpers.Generic.OrIfNullThrow``1(``0,System.Func{System.Exception})">
            <summary>
            If <typeparamref name="T"/> is either a value type or non-null reference type it is simply returned.
            If <typeparamref name="T"/> is a null reference then <paramref name="factory"/> is called to create the exception to be thrown.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">Value to be null-checked</param>
            <param name="factory">Function to create exception message. Only called when <paramref name="value"/> is null.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="factory"/> is null.</exception>
        </member>
        <member name="T:PW.Helpers.Misc">
            <summary>
            Methods with no place to live :(
            </summary>
        </member>
        <member name="M:PW.Helpers.Misc.Swap``1(``0@,``0@)">
            <summary>
            Swaps the values held by the two references.
            </summary>
        </member>
        <member name="M:PW.Helpers.Misc.EnsurePathSeparatorTerminated(System.String)">
            <summary>
            Ensures the directory path string is terminated with a <see cref="F:System.IO.Path.DirectorySeparatorChar"/>
            </summary>
        </member>
        <member name="M:PW.Helpers.Misc.GetCompositeHashCode(System.Object[])">
            <summary>
            Creates a composite hash code from for multiple objects.
            </summary>
        </member>
        <member name="M:PW.Helpers.Misc.CreateHashcode(System.Object[])">
            <summary>
            Creates a composite hashcode for the set of objects.
            </summary>
            <param name="objs"></param>
            <returns></returns>
        </member>
        <member name="T:PW.IOperation">
            <summary>
            Interface to perform void returning operation.
            </summary>
        </member>
        <member name="M:PW.IOperation.Perform">
            <summary>
            Performs the operation
            </summary> 
        </member>
        <member name="T:PW.IOperation`1">
            <summary>
            Interface to perform an operation which returns a value of type <typeparamref name="T"/>
            </summary>
        </member>
        <member name="M:PW.IOperation`1.Perform">
            <summary>
            Performs the operation
            </summary>    
        </member>
        <member name="T:PW.INullableOperation`1">
            <summary>
            Interface to perform an operation which returns a value of type <typeparamref name="T"/>, which may be null.
            </summary>
        </member>
        <member name="M:PW.INullableOperation`1.Perform">
            <summary>
            Performs the operation
            </summary>    
        </member>
        <member name="T:PW.IMaybeOperation`1">
            <summary>
            Interface to perform an operation which returns a value of type <see cref="T:CSharpFunctionalExtensions.Maybe`1"/>.
            </summary>
        </member>
        <member name="M:PW.IMaybeOperation`1.Perform">
            <summary>
            Performs the operation
            </summary>    
        </member>
        <member name="T:PW.IResultOperation">
            <summary>
            An interface to an operation which can be performed
            </summary>
        </member>
        <member name="M:PW.IResultOperation.Perform">
            <summary>
            Performs the operation and returns a <see cref="T:CSharpFunctionalExtensions.Result"/> of success or failure.
            </summary>    
        </member>
        <member name="T:PW.IResultOperation`1">
            <summary>
            Represents a <see cref="T:CSharpFunctionalExtensions.Result"/> returning operation.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:PW.IResultOperation`1.Perform">
            <summary>
            Performs the operation.
            </summary>
        </member>
        <member name="T:PW.IO.DelimitedFieldFileWriter">
            <summary>
            Class for writing to delimited text files.
            </summary>
        </member>
        <member name="T:PW.IO.DelimitedFieldFileWriter.FileMode">
            <summary>
            Log file mode
            </summary>
        </member>
        <member name="F:PW.IO.DelimitedFieldFileWriter.FileMode.Append">
            <summary>
            Append to existing data when writing.
            </summary>
        </member>
        <member name="F:PW.IO.DelimitedFieldFileWriter.FileMode.Truncate">
            <summary>
            Clear existing data before writing.
            </summary>
        </member>
        <member name="P:PW.IO.DelimitedFieldFileWriter.FlushAfterEachWrite">
            <summary>
            Flush data to disk after each write.
            </summary>
        </member>
        <member name="M:PW.IO.DelimitedFieldFileWriter.#ctor(System.IO.FileInfo,System.Char,System.String[],PW.IO.DelimitedFieldFileWriter.FileMode)">
            <summary>
            Creates a new instance of the <see cref="T:PW.IO.DelimitedFieldFileWriter"/> class.
            </summary>
            <param name="outputFile">Path to/for the delimited file.</param>
            <param name="fieldSeparator">The separator used to delimit fields in the file.</param>
            <param name="fieldNames">The names of the fields. Used as a file header.</param>
            <param name="fileMode">Either truncate (overwrite) or append to the file, if it already exists.</param>
        </member>
        <member name="M:PW.IO.DelimitedFieldFileWriter.Truncate">
            <summary>
            Truncates all data from the file and writes the field names.
            </summary>
        </member>
        <member name="M:PW.IO.DelimitedFieldFileWriter.WriteFields(System.String[])">
            <summary>
            Writes a line to the log file using the supplied field values separated by <see cref="P:PW.IO.DelimitedFieldFileWriter.FieldSeparator"/>.
            </summary>
            <param name="fields"></param>
        </member>
        <member name="M:PW.IO.DelimitedFieldFileWriter.Dispose">
            <summary>
            Releases all resources used by the <see cref="T:PW.IO.DelimitedFieldFileWriter"/> object.
            </summary>
        </member>
        <member name="T:PW.IO.DirectoryInfoExtensions">
            <summary>
            Extensions for the <see cref="T:System.IO.DirectoryInfo"/> class.
            </summary>
        </member>
        <member name="M:PW.IO.DirectoryInfoExtensions.EnumerateAuthorizedDirectories(System.IO.DirectoryInfo)">
            <summary>
            Enumerates all subdirectories to which access is authorized.
            </summary>
        </member>
        <member name="M:PW.IO.DirectoryInfoExtensions.EnumerateAuthorizedDirectories(System.IO.DirectoryInfo,System.Boolean)">
            <summary>
            Enumerates all subdirectories to which access is authorized.
            </summary>
        </member>
        <member name="M:PW.IO.DirectoryInfoExtensions.GetAuthorizedDirectories(System.IO.DirectoryInfo)">
            <summary>
            Returns a list of subdirectories to which access is authorized.
            </summary>
        </member>
        <member name="M:PW.IO.DirectoryInfoExtensions.GetAuthorizedAndUnauthorizedDirectories(System.IO.DirectoryInfo)">
            <summary>
            Returns lists of subdirectories to which access is authorized and unauthorized.
            </summary>
        </member>
        <member name="M:PW.IO.DirectoryInfoExtensions.WalkInternal(PW.IO.DirectoryInfoExtensions.WalkData)">
            <summary>
            Recursive walk down the directory tree structure.
            </summary>
            <param name="wd"></param>
        </member>
        <member name="T:PW.IO.DirectoryInfoExtensions.WalkData">
            <summary>
            Used to pass tracking data down the recursive call stack. <see cref="M:PW.IO.DirectoryInfoExtensions.WalkInternal(PW.IO.DirectoryInfoExtensions.WalkData)"/>.
            </summary>
        </member>
        <member name="M:PW.IO.DirectoryInfoExtensions.GetOrCreateSubdirectory(System.IO.DirectoryInfo,System.String)">
            <summary>
            Returns the named sub-directory, creates it if it does not exist.
            </summary>
        </member>
        <member name="M:PW.IO.DirectoryInfoExtensions.Append(System.IO.DirectoryInfo,PW.IO.FileSystemObjects.DirectoryName)">
            <summary>
            Returns a new <see cref="T:System.IO.DirectoryInfo"/> instance with the sub-directory appended.
            </summary>
        </member>
        <member name="M:PW.IO.DirectoryInfoExtensions.Append(System.IO.DirectoryInfo,System.String)">
            <summary>
            Returns a new <see cref="T:System.IO.DirectoryInfo"/> instance with the sub-directory appended.
            </summary>
        </member>
        <member name="M:PW.IO.DirectoryInfoExtensions.Append(System.IO.DirectoryInfo,PW.IO.FileSystemObjects.DirectoryName[])">
            <summary>
            Returns a new <see cref="T:System.IO.DirectoryInfo"/> instance with the sub-directories appended.
            If no arguments or a zero-length array are passed to <paramref name="subDirectories"/>, the original directory is returned.
            </summary>
        </member>
        <member name="M:PW.IO.DirectoryInfoExtensions.Append(System.IO.DirectoryInfo,System.String[])">
            <summary>
            Returns a new <see cref="T:System.IO.DirectoryInfo"/> instance with the sub-directories appended.
            If no arguments or a zero-length array are passed to <paramref name="subDirectories"/>, the original directory is returned.
            </summary>
        </member>
        <member name="M:PW.IO.DirectoryInfoExtensions.CreateSubdirectories(System.IO.DirectoryInfo,System.Collections.Generic.IEnumerable{PW.IO.FileSystemObjects.DirectoryName})">
            <summary>
            Creates sub-directories within the existing directory. Skips any sub-directory that already exist.
            </summary>
        </member>
        <member name="M:PW.IO.DirectoryInfoExtensions.WalkPathToRoot(System.IO.DirectoryInfo,System.Boolean)">
            <summary>
            Walks up the directory path from this directory to the root. Returns each directory on that path.
            </summary>
        </member>
        <member name="M:PW.IO.DirectoryInfoExtensions.WalkPathFromRoot(System.IO.DirectoryInfo,System.Boolean)">
            <summary>
            Walks the path to this directory from its root. Returns each directory on that path.
            </summary>
        </member>
        <member name="M:PW.IO.DirectoryInfoExtensions.EnsureExists(System.IO.DirectoryInfo)">
            <summary>
            Creates the directory if it does not already exist. 
            </summary>
            <param name="directory"></param>
            <returns>The original directory, for fluid-chaining etc.
            An exception will be thrown if the directory cannot be created or is null.</returns>
        </member>
        <member name="M:PW.IO.DirectoryInfoExtensions.TryEnsureExists(System.IO.DirectoryInfo)">
            <summary>
            Creates the directory if it does not already exist. 
            </summary>
            <param name="directory"></param>
            <returns>Returns (true, null), if the directory already exists or it is created successfully. 
            If an exception occurs creating the directory, returns (false,error) where 'error' is the exception message.</returns>
            <exception cref="T:System.ArgumentNullException"> If <paramref name="directory"/> is null.</exception>
        </member>
        <member name="M:PW.IO.DirectoryInfoExtensions.GetFiles(System.IO.DirectoryInfo,System.Collections.Generic.IEnumerable{System.String},System.IO.SearchOption)">
            <summary>
            Returns a list of files from the directory which have file extensions as specified by <paramref name="extensions"/>
            </summary>
        </member>
        <member name="M:PW.IO.DirectoryInfoExtensions.EnumerateFiles(System.IO.DirectoryInfo,System.Collections.Generic.IEnumerable{System.String},System.IO.SearchOption)">
            <summary>
            Enumerates files from the directory which have file extensions as specified by <paramref name="extensions"/>
            </summary>
        </member>
        <member name="M:PW.IO.DirectoryInfoExtensions.SubDirectory(System.IO.DirectoryInfo,System.String)">
            <summary>
            Returns a new <seealso cref="T:System.IO.DirectoryInfo"/> instance representing the named sub-directory. 
            Does not check if the directory or sub-directory exist or create them.
            </summary>
            <param name="directory">The parent directory</param>
            <param name="subDirectoryName">The short-name of the sub-directory. Not the full path to it!"</param>
            <returns></returns>
        </member>
        <member name="M:PW.IO.DirectoryInfoExtensions.RecursiveDeleteEmptySubDirectories(System.IO.DirectoryInfo)">
            <summary>
            Recursively deletes all sub-directories that are either empty, or only themselves contains empty sub-directories.
            Returns an array of <see cref="T:System.IO.DirectoryInfo"/> containing an entry for each directory deleted.
            If the initial directory does not exist, an empty array is returned.
            </summary>
        </member>
        <member name="T:PW.IO.DirectoryInfoPathEqualityComparer">
            <summary>
            Equality comparer for <see cref="T:System.IO.DirectoryInfo"/> objects using FullName equality, rather than reference equality.
            Ordinal case insensitive comparison is used.
            </summary>
        </member>
        <member name="P:PW.IO.DirectoryInfoPathEqualityComparer.Instance">
            <summary>
            Default instance.
            </summary>
        </member>
        <member name="M:PW.IO.DirectoryInfoPathEqualityComparer.Equals(System.IO.DirectoryInfo,System.IO.DirectoryInfo)">
            <summary>
            Returns true if the two <see cref="T:System.IO.DirectoryInfo"/> instances have the same path. Otherwise returns false.
            Casing is ignored.
            </summary>
        </member>
        <member name="M:PW.IO.DirectoryInfoPathEqualityComparer.GetHashCode(System.IO.DirectoryInfo)">
            <summary>
            Returns the hash code for FullName.
            </summary>
        </member>
        <member name="T:PW.IO.DisableFileSystemRedirection">
            <summary>
            Disables file system redirection for the current thread of a 32-bit application.
            Does nothing if the current application is 64-bit.
            Dispose method reverts redirection. Use in a using block, for example.
            Calls native methods: Wow64DisableWow64FsRedirection() and Wow64RevertWow64FsRedirection()
            </summary>
        </member>
        <member name="M:PW.IO.DisableFileSystemRedirection.#ctor">
            <summary>
            Creates a new instance which disables redirection until it is disposed.
            </summary>
        </member>
        <member name="M:PW.IO.DisableFileSystemRedirection.Dispose">
            <summary>
            Reverts file system redirection.
            </summary>
        </member>
        <member name="T:PW.IO.Elevation">
            <summary>
            For creation of process with user rights elevation.
            </summary>
        </member>
        <member name="M:PW.IO.Elevation.RunAsAdministrator(System.String,System.Boolean)">
            <summary>
            Runs/opens the specified executable/file with administrative rights.
            Only catches 'user-cancelled' exception when <paramref name="ignoreCancellationException"/> is true.
            </summary>
            <returns>On success: Maybe{Process}. On cancellation: Maybe{Process}.None. On other exception: throws.</returns>
        </member>
        <member name="M:PW.IO.Elevation.RunAsAdministrator(System.String)">
            <summary>
            Executes / opens the specified file with administrator rights.
            Handles no exceptions.
            </summary>
        </member>
        <member name="M:PW.IO.Elevation.TryRunAsAdministrator(System.String)">
            <summary>
            Executes / opens the specified file with administrator rights.
            Wraps exceptions from <see cref="M:System.Diagnostics.Process.Start"/>
            </summary>
        </member>
        <member name="T:PW.IO.FileGrouperBase">
            <summary>
            Provides base functionality to classes designed to 'group' files into sub-directories.
            </summary>
        </member>
        <member name="M:PW.IO.FileGrouperBase.#ctor(System.IO.DirectoryInfo,System.String)">
            <summary>
            Creates a new instance. Called from the sub-class
            </summary>
        </member>
        <member name="M:PW.IO.FileGrouperBase.#ctor(System.IO.DirectoryInfo)">
            <summary>
            Creates a new instance. Called from the sub-class
            </summary>
        </member>
        <member name="M:PW.IO.FileGrouperBase.FileFilter(System.IO.FileInfo)">
            <summary>
            Logic to determine whether to include a file in the grouping operation.
            </summary>
        </member>
        <member name="M:PW.IO.FileGrouperBase.Map(System.IO.FileInfo)">
            <summary>
            Logic to map (move) a file to a new directory.
            </summary>
        </member>
        <member name="P:PW.IO.FileGrouperBase.Directory">
            <summary>
            Directory containing files to be 'grouped' into sub-directories.
            </summary>
        </member>
        <member name="P:PW.IO.FileGrouperBase.FileMask">
            <summary>
            Mask used to obtain list of files within <see cref="P:PW.IO.FileGrouperBase.Directory"/>
            </summary>
        </member>
        <member name="M:PW.IO.FileGrouperBase.Perform">
            <summary>
            Performs the 'grouping' of sequentially named files into sub-directories.
            </summary>
        </member>
        <member name="M:PW.IO.FileGrouperBase.CreateMappings">
            <summary>
            Creates an array of mappings: 'file -> sub-directory-name'.
            </summary>
        </member>
        <member name="T:PW.IO.FileInfoExtensions">
            <summary>
            Extension methods for the <see cref="T:System.IO.FileInfo"/> class.
            </summary>
        </member>
        <member name="M:PW.IO.FileInfoExtensions.ChangeExtension(System.IO.FileInfo,System.String)">
            <summary>
            Returns a new <see cref="T:System.IO.FileInfo"/> instance with the file extension changed.
            </summary>
        </member>
        <member name="M:PW.IO.FileInfoExtensions.ChangeDirectory(System.IO.FileInfo,System.String)">
            <summary>
            Returns a new <see cref="T:System.IO.FileInfo"/> instance with the directory path changed.
            </summary>
        </member>
        <member name="M:PW.IO.FileInfoExtensions.ChangeDirectory(System.IO.FileInfo,System.IO.DirectoryInfo)">
            <summary>
            Returns a new <see cref="T:System.IO.FileInfo"/> instance with the directory path changed.
            </summary>
        </member>
        <member name="M:PW.IO.FileInfoExtensions.SendToRecycleBin(System.IO.FileInfo)">
            <summary>
            Deletes the file to the recycle bin.
            </summary>    
        </member>
        <member name="M:PW.IO.FileInfoExtensions.SelectInExplorer(System.IO.FileInfo)">
            <summary>
            Opens explorer and selects the specified file.
            </summary>
            <param name="file"></param>
        </member>
        <member name="M:PW.IO.FileInfoExtensions.NameWithoutExtension(System.IO.FileInfo)">
            <summary>
            Returns the file name without extension.
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:PW.IO.FileInfoExtensions.Rename(System.IO.FileInfo,System.String)">
            <summary>
            Changes the name of the file to that specified by <paramref name="newName"/>
            </summary>
        </member>
        <member name="M:PW.IO.FileInfoExtensions.HasExtension(System.IO.FileInfo,System.String)">
            <summary>
            Checks whether the <see cref="T:System.IO.FileInfo"/> has the specified extension. Include the dot!
            </summary>
            <param name="file">this</param>
            <param name="extension">The file extension, including the dot!</param>
            <returns></returns>
        </member>
        <member name="M:PW.IO.FileInfoExtensions.CreateRenameOperation(System.IO.FileInfo,System.String)">
            <summary>
            Creates a file rename operation that can be performed later.
            </summary>
            <param name="file">The file to be renamed.</param>
            <param name="newName">The new name for the file.</param>
            <returns>An operation that can later be performed.</returns>
        </member>
        <member name="M:PW.IO.FileInfoExtensions.MoveTo(System.IO.FileInfo,System.IO.DirectoryInfo)">
            <summary>
            Moves the file to a new directory. The file name will remain the same. The directory will be created if it does not exist.
            To both move and rename a file use  <see cref="M:PW.IO.FileInfoExtensions.MoveTo(System.IO.FileInfo,System.IO.FileInfo)"/> or <see cref="M:System.IO.FileInfo.MoveTo(System.String)"/>
            </summary>
        </member>
        <member name="M:PW.IO.FileInfoExtensions.MoveTo(System.IO.FileInfo,System.IO.FileInfo)">
            <summary>
            Moves the file new a new location.
            </summary>
        </member>
        <member name="M:PW.IO.FileInfoExtensions.WaitForAccess(System.IO.FileInfo,System.TimeSpan)">
            <summary>
            Attempts to open the file for shared read access. If the file is locked it will retry for the specified time-out period.
            </summary>
            <param name="file">File to open.</param>
            <param name="timeout">Time-out period to wait, when file is locked.</param>
            <returns>Open <see cref="T:System.IO.FileStream"/> on success or null if the time-out expires.</returns>
        </member>
        <member name="M:PW.IO.FileInfoExtensions.IsReadLocked(System.IO.FileInfo)">
            <summary>
            Determines whether a file can be opened for shared-read access. 
            Returns false if it can be opened, or if file or does not exist. Otherwise returns true.
            </summary>
        </member>
        <member name="M:PW.IO.FileInfoExtensions.IsReadable(System.IO.FileInfo)">
            <summary>
            Determines whether an existing file can be opened for shared-read access. 
            Returns true if it exists and is not locked to prevent shared-read. Otherwise returns false.
            </summary>
        </member>
        <member name="M:PW.IO.FileInfoExtensions.WaitForAccess(System.IO.FileInfo,System.TimeSpan,PW.IO.FileOpenArguments)">
            <summary>
            Attempts to open the file with a retrying timeout. Useful for files which may initially be locked. NB: Uses <see cref="M:System.Threading.Thread.Sleep(System.Int32)"/> during wait loop.
            </summary>
            <param name="file">this</param>
            <param name="timeout"></param>
            <param name="open"></param>
            <returns></returns>
        </member>
        <member name="F:PW.IO.FileInfoExtensions.Win32FileShare.None">
             <summary>
            
             </summary>
        </member>
        <member name="F:PW.IO.FileInfoExtensions.Win32FileShare.Read">
            <summary>
            Enables subsequent open operations on an object to request read access.
            Otherwise, other processes cannot open the object if they request read access.
            If this flag is not specified, but the object has been opened for read access, the function fails.
            </summary>
        </member>
        <member name="F:PW.IO.FileInfoExtensions.Win32FileShare.Write">
            <summary>
            Enables subsequent open operations on an object to request write access.
            Otherwise, other processes cannot open the object if they request write access.
            If this flag is not specified, but the object has been opened for write access, the function fails.
            </summary>
        </member>
        <member name="F:PW.IO.FileInfoExtensions.Win32FileShare.Delete">
            <summary>
            Enables subsequent open operations on an object to request delete access.
            Otherwise, other processes cannot open the object if they request delete access.
            If this flag is not specified, but the object has been opened for delete access, the function fails.
            </summary>
        </member>
        <member name="F:PW.IO.FileInfoExtensions.Win32CreationDisposition.New">
            <summary>
            Creates a new file. The function fails if a specified file exists.
            </summary>
        </member>
        <member name="F:PW.IO.FileInfoExtensions.Win32CreationDisposition.CreateAlways">
            <summary>
            Creates a new file, always.
            If a file exists, the function overwrites the file, clears the existing attributes, combines the specified file attributes,
            and flags with FILE_ATTRIBUTE_ARCHIVE, but does not set the security descriptor that the SECURITY_ATTRIBUTES structure specifies.
            </summary>
        </member>
        <member name="F:PW.IO.FileInfoExtensions.Win32CreationDisposition.OpenExisting">
            <summary>
            Opens a file. The function fails if the file does not exist.
            </summary>
        </member>
        <member name="F:PW.IO.FileInfoExtensions.Win32CreationDisposition.OpenAlways">
            <summary>
            Opens a file, always.
            If a file does not exist, the function creates a file as if dwCreationDisposition is CREATE_NEW.
            </summary>
        </member>
        <member name="F:PW.IO.FileInfoExtensions.Win32CreationDisposition.TruncateExisting">
            <summary>
            Opens a file and truncates it so that its size is 0 (zero) bytes. The function fails if the file does not exist.
            The calling process must open the file with the GENERIC_WRITE access right.
            </summary>
        </member>
        <member name="T:PW.IO.FileOpenArguments">
            <summary>
            
            </summary>
        </member>
        <member name="M:PW.IO.FileOpenArguments.#ctor(System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:PW.IO.FileOpenArguments.Mode">
            <summary>
            Specifies how the operating system should open the file.
            </summary>
        </member>
        <member name="P:PW.IO.FileOpenArguments.Access">
            <summary>
            Open for read, write read/write access to the file.
            </summary>
        </member>
        <member name="P:PW.IO.FileOpenArguments.Share">
            <summary>
            The kind of access other <see cref="T:System.IO.FileStream"/> objects can have to the same file.
            </summary>
        </member>
        <member name="P:PW.IO.FileOpenArguments.OpenForSharedRead">
            <summary>
            Returns a new file open for shared read instance.
            </summary>
        </member>
        <member name="T:PW.IO.FileRenameOperation">
            <summary>
            Encapsulates a file rename operation
            </summary>
        </member>
        <member name="M:PW.IO.FileRenameOperation.#ctor(System.IO.FileInfo,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="file">File to be renamed</param>
            <param name="newName">New name for the file</param>
        </member>
        <member name="M:PW.IO.FileRenameOperation.Perform">
            <summary>
            Performs the rename operation
            </summary>
            <returns></returns>
        </member>
        <member name="M:PW.IO.FileRenameOperation.ToString">
            <summary>
            ToString()
            </summary>
        </member>
        <member name="T:PW.IO.FileSystemInfoExtensions">
            <summary>
            Extension methods for <see cref="T:System.IO.FileSystemInfo"/> instances.
            </summary>
        </member>
        <member name="M:PW.IO.FileSystemInfoExtensions.DeleteIfExists(System.IO.FileSystemInfo)">
            <summary>
            Deletes the <see cref="T:System.IO.FileSystemInfo"/> entry from disk, if it exists. Otherwise does nothing.
            </summary>
            <param name="fso"></param>
        </member>
        <member name="M:PW.IO.FileSystemInfoExtensions.Launch(System.IO.FileSystemInfo)">
            <summary>
            Launches the <see cref="T:System.IO.FileSystemInfo"/> in a new process and returns the new process.
            </summary>
        </member>
        <member name="T:PW.IO.FileSystemObjects.DirectoryName">
            <summary>
            Represents a single directory name, without the rest of the directory path.
            </summary>
        </member>
        <member name="M:PW.IO.FileSystemObjects.DirectoryName.#ctor(System.String)">
            <summary>
            ctor -- Throws exceptions if invalid <paramref name="value"/> is passed.
            </summary>    
        </member>
        <member name="M:PW.IO.FileSystemObjects.DirectoryName.#ctor(PW.IO.FileSystemObjects.DirectoryPath)">
            <summary>
            Creates a new instance from an existing <see cref="T:PW.IO.FileSystemObjects.DirectoryPath"/>. Skips validation.
            </summary>
        </member>
        <member name="M:PW.IO.FileSystemObjects.DirectoryName.#ctor(PW.IO.FileSystemObjects.FilePath)">
            <summary>
            Creates a new instance from an existing <see cref="T:PW.IO.FileSystemObjects.FilePath"/>. Skips validation.
            </summary>
        </member>
        <member name="M:PW.IO.FileSystemObjects.DirectoryName.op_Explicit(System.String)~PW.IO.FileSystemObjects.DirectoryName">
            <summary>
            Casts a string to a <see cref="T:PW.IO.FileSystemObjects.DirectoryName"/>.
            </summary> 
        </member>
        <member name="M:PW.IO.FileSystemObjects.DirectoryName.op_Explicit(PW.IO.FileSystemObjects.DirectoryName)~System.String">
            <summary>
            Casts a <see cref="T:PW.IO.FileSystemObjects.DirectoryName"/> to a string.
            </summary>    
        </member>
        <member name="T:PW.IO.FileSystemObjects.DirectoryPath">
            <summary>
            Represents a file system directory path.
            </summary>
        </member>
        <member name="M:PW.IO.FileSystemObjects.DirectoryPath.#ctor(System.String)">
            <summary>
            Creates a new instance from a string. Basic validation performed. <see cref="F:System.IO.Path.DirectorySeparatorChar"/> appended if missing.
            Supports relative paths. (e.g. . or ..) Path of just [Drive]: (e.g. C:) will return current directory for that drive.
            </summary>
        </member>
        <member name="M:PW.IO.FileSystemObjects.DirectoryPath.#ctor(System.IO.DirectoryInfo)">
            <summary>
            Creates an instance from an existing <see cref="T:System.IO.DirectoryInfo"/> object. Path validation skipped. <see cref="F:System.IO.Path.DirectorySeparatorChar"/> appended if missing.
            </summary>    
        </member>
        <member name="M:PW.IO.FileSystemObjects.DirectoryPath.#ctor(PW.IO.FileSystemObjects.FilePath)">
            <summary>
            Creates a new instance
            </summary>
            <param name="filePath"></param>
        </member>
        <member name="M:PW.IO.FileSystemObjects.DirectoryPath.FromStringInternal(System.String)">
            <summary>
            Creates a new instance from a string, without performing validation on the string.
            </summary>
        </member>
        <member name="M:PW.IO.FileSystemObjects.DirectoryPath.op_Explicit(System.String)~PW.IO.FileSystemObjects.DirectoryPath">
            <summary>
            Casts a <see cref="T:System.String"/> to a <see cref="T:PW.IO.FileSystemObjects.DirectoryPath"/>.
            </summary>    
        </member>
        <member name="M:PW.IO.FileSystemObjects.DirectoryPath.op_Explicit(System.IO.DirectoryInfo)~PW.IO.FileSystemObjects.DirectoryPath">
            <summary>
            Casts a <see cref="T:System.String"/> to a <see cref="T:PW.IO.FileSystemObjects.DirectoryPath"/>.
            </summary>    
        </member>
        <member name="M:PW.IO.FileSystemObjects.DirectoryPath.op_Explicit(PW.IO.FileSystemObjects.DirectoryPath)~System.String">
            <summary>
            Casts a <see cref="T:PW.IO.FileSystemObjects.DirectoryPath"/> to a <see cref="T:System.String"/>.
            </summary>    
        </member>
        <member name="M:PW.IO.FileSystemObjects.DirectoryPath.op_Explicit(PW.IO.FileSystemObjects.DirectoryPath)~System.IO.DirectoryInfo">
            <summary>
            Casts a <see cref="T:PW.IO.FileSystemObjects.DirectoryPath"/> to a <see cref="T:System.IO.DirectoryInfo"/>.
            </summary>    
        </member>
        <member name="M:PW.IO.FileSystemObjects.DirectoryPath.op_Explicit(PW.IO.FileSystemObjects.FilePath)~PW.IO.FileSystemObjects.DirectoryPath">
            <summary>
            Casts a <see cref="T:PW.IO.FileSystemObjects.FilePath"/> to a <see cref="T:PW.IO.FileSystemObjects.DirectoryPath"/>.
            </summary>
        </member>
        <member name="M:PW.IO.FileSystemObjects.DirectoryPath.op_Addition(PW.IO.FileSystemObjects.DirectoryPath,PW.IO.FileSystemObjects.FileName)">
            <summary>
            Creates a FilePath from a DirectoryPath and FileName.
            </summary>
        </member>
        <member name="M:PW.IO.FileSystemObjects.DirectoryPath.op_Addition(PW.IO.FileSystemObjects.DirectoryPath,PW.IO.FileSystemObjects.DirectoryName)">
            <summary>
            Creates a DirectoryPath from a DirectoryPath and Sub-DirectoryName.
            </summary>
        </member>
        <member name="M:PW.IO.FileSystemObjects.DirectoryPath.ToDirectoryInfo">
            <summary>
            Creates a new <see cref="T:System.IO.DirectoryInfo"/> object using this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="F:PW.IO.FileSystemObjects.DirectoryPath._Parent">
            <summary>
            Cache variable for <see cref="P:PW.IO.FileSystemObjects.DirectoryPath.Parent"/> property
            </summary>
        </member>
        <member name="F:PW.IO.FileSystemObjects.DirectoryPath._DirectoryName">
            <summary>
            Cache variable for <see cref="T:PW.IO.FileSystemObjects.DirectoryName"/> property
            </summary>
        </member>
        <member name="M:PW.IO.FileSystemObjects.DirectoryPath.Append(PW.IO.FileSystemObjects.DirectoryName)">
            <summary>
            Returns a new <see cref="T:PW.IO.FileSystemObjects.DirectoryPath"/> instance with the specified sub-directory name appended.
            </summary>
        </member>
        <member name="M:PW.IO.FileSystemObjects.DirectoryPath.Append(PW.IO.FileSystemObjects.FileName)">
            <summary>
            Returns a new <see cref="T:PW.IO.FileSystemObjects.DirectoryPath"/> instance with the specified file name appended.
            </summary>
        </member>
        <member name="M:PW.IO.FileSystemObjects.DirectoryPath.File(System.String)">
            <summary>
            Returns a new <see cref="T:PW.IO.FileSystemObjects.DirectoryPath"/> instance with the specified file name appended.
            </summary>
        </member>
        <member name="M:PW.IO.FileSystemObjects.DirectoryPath.IsBelow(PW.IO.FileSystemObjects.DirectoryPath)">
            <summary>
            Returns true if this directory is below the specified directory. It may be a direct sub-directory or further down the same path.
            </summary>
        </member>
        <member name="P:PW.IO.FileSystemObjects.DirectoryPath.Parent">
            <summary>
            Returns the parent directory or null if the directory does not have a parent. Value is cached after initial call.
            </summary>
        </member>
        <member name="P:PW.IO.FileSystemObjects.DirectoryPath.Name">
            <summary>
            Returns the name of the last directory in the path. Value is cached after initial call.
            </summary>
        </member>
        <member name="M:PW.IO.FileSystemObjects.DirectoryPath.ToString(System.Boolean)">
            <summary>
            Returns the path as a string, specifying whether to include the terminating slash.
            </summary>
            <returns></returns>
        </member>
        <member name="P:PW.IO.FileSystemObjects.DirectoryPath.Exists">
            <summary>
            Determines whether the path refers to an existing directory on disk.
            </summary>
        </member>
        <member name="T:PW.IO.FileSystemObjects.FileExtension">
            <summary>
            Represents a file's extension. Instances of this class are cached. The same instance will always be returned for a particular extension.
            </summary>
        </member>
        <member name="P:PW.IO.FileSystemObjects.FileExtension.Cache">
            <summary>
            A cache mapping string -> FileExtension. 
            String comparison is deliberately NOT case-insensitive. 
            Extensions should be converted to lower-case before caching.
            </summary>
        </member>
        <member name="M:PW.IO.FileSystemObjects.FileExtension.#ctor(System.String)">
            <summary>
            Creates a new instance. NB: value is not validated. This MUST be done with the factory methods.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:PW.IO.FileSystemObjects.FileExtension.From(System.String)">
            <summary>
            Cannot be null. Cannot be single character. Can be empty. 
            When not empty, the first character must be a period and the remaining characters must include at least one other non-white-space, non-period character.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:PW.IO.FileSystemObjects.FileExtension.From(PW.IO.FileSystemObjects.FilePath)">
            <summary>
            Creates an instance from an existing <see cref="T:PW.IO.FileSystemObjects.FilePath"/> object.
            </summary>
        </member>
        <member name="M:PW.IO.FileSystemObjects.FileExtension.From(PW.IO.FileSystemObjects.FileName)">
            <summary>
            Creates an instance from an existing <see cref="T:PW.IO.FileSystemObjects.FilePath"/> object.
            </summary>
        </member>
        <member name="M:PW.IO.FileSystemObjects.FileExtension.From(System.IO.FileInfo)">
            <summary>
            Creates an instance from an existing <see cref="T:System.IO.FileInfo"/> object.
            </summary>
        </member>
        <member name="M:PW.IO.FileSystemObjects.FileExtension.op_Explicit(System.String)~PW.IO.FileSystemObjects.FileExtension">
            <summary>
            Casts a <see cref="T:System.String"/> to a <see cref="T:PW.IO.FileSystemObjects.FileExtension"/>.
            </summary>    
        </member>
        <member name="M:PW.IO.FileSystemObjects.FileExtension.op_Explicit(PW.IO.FileSystemObjects.FilePath)~PW.IO.FileSystemObjects.FileExtension">
            <summary>
            Casts a <see cref="T:PW.IO.FileSystemObjects.FilePath"/> to a <see cref="T:PW.IO.FileSystemObjects.FileExtension"/>.
            </summary>  
        </member>
        <member name="M:PW.IO.FileSystemObjects.FileExtension.op_Explicit(System.IO.FileInfo)~PW.IO.FileSystemObjects.FileExtension">
            <summary>
            Casts a <see cref="T:System.IO.FileInfo"/> to a <see cref="T:PW.IO.FileSystemObjects.FileExtension"/>.
            </summary>  
        </member>
        <member name="M:PW.IO.FileSystemObjects.FileExtension.op_Explicit(PW.IO.FileSystemObjects.FileName)~PW.IO.FileSystemObjects.FileExtension">
            <summary>
            Casts a file name to a file extension.
            </summary>    
        </member>
        <member name="M:PW.IO.FileSystemObjects.FileExtension.op_Explicit(PW.IO.FileSystemObjects.FileExtension)~System.String">
            <summary>
            Casts a file extension to a string.
            </summary>    
        </member>
        <member name="M:PW.IO.FileSystemObjects.FileExtension.CreateMask(System.String)">
            <summary>
            Creates a file mask for this file type. E.g. passing '*' as <paramref name="filenameMask"/> will return '*.extension'
            </summary>
        </member>
        <member name="M:PW.IO.FileSystemObjects.FileExtension.CreateMask">
            <summary>
            Creates a file mask for all files with this extension.
            </summary>
        </member>
        <member name="T:PW.IO.FileSystemObjects.FileName">
            <summary>
            Represents a file's name, without the directory path element.
            </summary>
        </member>
        <member name="M:PW.IO.FileSystemObjects.FileName.#ctor(System.String)">
            <summary>
            Creates a new instance from the specified string. Basic validation performed.
            </summary>
        </member>
        <member name="M:PW.IO.FileSystemObjects.FileName.#ctor(PW.IO.FileSystemObjects.FilePath)">
            <summary>
            Creates a new instance from the existing <see cref="T:PW.IO.FileSystemObjects.FilePath"/>.
            </summary>
        </member>
        <member name="M:PW.IO.FileSystemObjects.FileName.#ctor(System.IO.FileInfo)">
            <summary>
            Creates a new instance from the existing <see cref="T:PW.IO.FileSystemObjects.FilePath"/>.
            </summary>
        </member>
        <member name="M:PW.IO.FileSystemObjects.FileName.op_Explicit(System.String)~PW.IO.FileSystemObjects.FileName">
            <summary>
            Casts a <see cref="T:System.String"/> to a <see cref="T:PW.IO.FileSystemObjects.FileName"/>.
            </summary>    
        </member>
        <member name="M:PW.IO.FileSystemObjects.FileName.op_Explicit(PW.IO.FileSystemObjects.FilePath)~PW.IO.FileSystemObjects.FileName">
            <summary>
            Casts a <see cref="T:PW.IO.FileSystemObjects.FilePath"/> to a <see cref="T:PW.IO.FileSystemObjects.FileName"/>.
            </summary>
        </member>
        <member name="M:PW.IO.FileSystemObjects.FileName.op_Explicit(System.IO.FileInfo)~PW.IO.FileSystemObjects.FileName">
            <summary>
            Casts a <see cref="T:PW.IO.FileSystemObjects.FilePath"/> to a <see cref="T:PW.IO.FileSystemObjects.FileName"/>.
            </summary>
        </member>
        <member name="M:PW.IO.FileSystemObjects.FileName.op_Explicit(PW.IO.FileSystemObjects.FileName)~System.String">
            <summary>
            Casts a file name to a string.
            </summary>    
        </member>
        <member name="P:PW.IO.FileSystemObjects.FileName.WithoutExtension">
            <summary>
            Returns the file name without extension. Cached after first use.
            </summary>
        </member>
        <member name="P:PW.IO.FileSystemObjects.FileName.Extension">
            <summary>
            Returns the file extension.
            </summary>
        </member>
        <member name="M:PW.IO.FileSystemObjects.FileName.CreateMask">
            <summary>
            Creates a mask for all files of the same name but any extension.
            </summary>    
        </member>
        <member name="T:PW.IO.FileSystemObjects.FileNameWithoutExtension">
            <summary>
            Represents a file name, without it's extension element.
            </summary>
        </member>
        <member name="M:PW.IO.FileSystemObjects.FileNameWithoutExtension.#ctor(System.String)">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:PW.IO.FileSystemObjects.FileNameWithoutExtension.#ctor(PW.IO.FileSystemObjects.FilePath)">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:PW.IO.FileSystemObjects.FileNameWithoutExtension.#ctor(PW.IO.FileSystemObjects.FileName)">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:PW.IO.FileSystemObjects.FileNameWithoutExtension.#ctor(System.IO.FileInfo)">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:PW.IO.FileSystemObjects.FileNameWithoutExtension.op_Explicit(System.String)~PW.IO.FileSystemObjects.FileNameWithoutExtension">
            <summary>
            Casts a <see cref="T:System.String"/> to a <see cref="T:PW.IO.FileSystemObjects.FileNameWithoutExtension"/>.
            </summary>    
        </member>
        <member name="M:PW.IO.FileSystemObjects.FileNameWithoutExtension.op_Explicit(PW.IO.FileSystemObjects.FileNameWithoutExtension)~System.String">
            <summary>
            Casts a <see cref="T:PW.IO.FileSystemObjects.FileNameWithoutExtension"/> to a <see cref="T:System.String"/>.
            </summary>    
        </member>
        <member name="M:PW.IO.FileSystemObjects.FileNameWithoutExtension.op_Explicit(PW.IO.FileSystemObjects.FileName)~PW.IO.FileSystemObjects.FileNameWithoutExtension">
            <summary>
            
            </summary>    
        </member>
        <member name="M:PW.IO.FileSystemObjects.FileNameWithoutExtension.op_Explicit(PW.IO.FileSystemObjects.FilePath)~PW.IO.FileSystemObjects.FileNameWithoutExtension">
            <summary>
            
            </summary>    
        </member>
        <member name="M:PW.IO.FileSystemObjects.FileNameWithoutExtension.op_Addition(PW.IO.FileSystemObjects.FileNameWithoutExtension,PW.IO.FileSystemObjects.FileExtension)">
            <summary>
            Creates a FileName from a FileNameWithoutExtension and FileExtension.
            </summary>
        </member>
        <member name="M:PW.IO.FileSystemObjects.FileNameWithoutExtension.CreateMask">
            <summary>
            Creates a mask for all files of the same name but any extension.
            </summary>    
        </member>
        <member name="T:PW.IO.FileSystemObjects.FilePath">
            <summary>
            Instance methods for FilePath.ChangeX
            </summary>
            <summary>
            Represents a path to a file on disk.
            </summary>
        </member>
        <member name="M:PW.IO.FileSystemObjects.FilePath.ChangeDirectory(PW.IO.FileSystemObjects.DirectoryPath)">
            <summary>
            Creates a new <see cref="T:PW.IO.FileSystemObjects.FilePath"/> using the original file name with a different path.
            </summary>
        </member>
        <member name="M:PW.IO.FileSystemObjects.FilePath.ChangeExtension(PW.IO.FileSystemObjects.FileExtension)">
            <summary>
            Returns a new instance with the file extension changed. Does not change the file on disk.
            </summary>
        </member>
        <member name="M:PW.IO.FileSystemObjects.FilePath.ChangeName(PW.IO.FileSystemObjects.FileName)">
            <summary>
            Returns a new instance with the file name changed. Does not change the file on disk.
            </summary>
        </member>
        <member name="M:PW.IO.FileSystemObjects.FilePath.ChangeName(System.Func{System.String,System.String})">
            <summary>
            Creates a new <see cref="T:System.IO.FileInfo"/> with the name changed, using a delegate function.
            </summary>
        </member>
        <member name="M:PW.IO.FileSystemObjects.FilePath.ChangeName(PW.IO.FileSystemObjects.FileNameWithoutExtension)">
            <summary>
            Returns a new instance with the file name changed but with the same extension. Does not change the file on disk.
            </summary>
        </member>
        <member name="M:PW.IO.FileSystemObjects.FilePath.#ctor(System.String)">
            <summary>
            Creates a new instance using the specified file name or full path. 
            If just the file name is supplied, then the current directory is prepended to create the full path.
            </summary>
        </member>
        <member name="M:PW.IO.FileSystemObjects.FilePath.#ctor(System.IO.FileInfo)">
            <summary>
            Creates a new instance using an existing <see cref="T:System.IO.FileInfo"/> object.
            </summary>    
        </member>
        <member name="M:PW.IO.FileSystemObjects.FilePath.op_Explicit(System.String)~PW.IO.FileSystemObjects.FilePath">
            <summary>
            Casts a <see cref="T:System.String"/> to a <see cref="T:PW.IO.FileSystemObjects.FilePath"/>.
            </summary>    
        </member>
        <member name="M:PW.IO.FileSystemObjects.FilePath.op_Explicit(PW.IO.FileSystemObjects.FilePath)~System.String">
            <summary>
            Casts a <see cref="T:PW.IO.FileSystemObjects.FilePath"/> to a <see cref="T:System.String"/>.
            </summary>    
        </member>
        <member name="M:PW.IO.FileSystemObjects.FilePath.op_Explicit(System.IO.FileInfo)~PW.IO.FileSystemObjects.FilePath">
            <summary>
            Casts a <see cref="T:System.IO.FileInfo"/> to a <see cref="T:PW.IO.FileSystemObjects.FilePath"/>.
            </summary>    
        </member>
        <member name="M:PW.IO.FileSystemObjects.FilePath.op_Explicit(PW.IO.FileSystemObjects.FilePath)~System.IO.FileInfo">
            <summary>
            Casts a <see cref="T:PW.IO.FileSystemObjects.FilePath"/> to a <see cref="T:System.IO.FileInfo"/>.
            </summary>    
        </member>
        <member name="M:PW.IO.FileSystemObjects.FilePath.ToFileInfo">
            <summary>
            Creates a new instance of <see cref="T:System.IO.FileInfo"/> for this <see cref="T:PW.IO.FileSystemObjects.FilePath"/>.
            </summary>
        </member>
        <member name="P:PW.IO.FileSystemObjects.FilePath.Extension">
            <summary>
            Returns the file extension. Cached after first call.
            </summary>
            <returns></returns>
        </member>
        <member name="P:PW.IO.FileSystemObjects.FilePath.DirectoryPath">
            <summary>
            Returns the directory path which contains the file. Cached after first call.
            </summary>
        </member>
        <member name="P:PW.IO.FileSystemObjects.FilePath.DirectoryName">
            <summary>
            Returns the directory name for the current instance. Cached after first call.
            </summary>
        </member>
        <member name="P:PW.IO.FileSystemObjects.FilePath.Name">
            <summary>
            Returns the file's name including the extension. Cached after first call.
            </summary>
        </member>
        <member name="P:PW.IO.FileSystemObjects.FilePath.NameWithoutExtension">
            <summary>
            Returns the file's name excluding the extension. Cached after first call.
            </summary>
        </member>
        <member name="P:PW.IO.FileSystemObjects.FilePath.Exists">
            <summary>
            Determines whether the path refers to an existing file on disk. Not cached.
            </summary>
        </member>
        <member name="M:PW.IO.FileSystemObjects.FilePath.From(System.IO.FileInfo)">
            <summary>
            Creates a new instance from the given <see cref="T:System.IO.FileInfo"/> object.
            </summary>
        </member>
        <member name="M:PW.IO.FileSystemObjects.FilePath.From(System.String)">
            <summary>
            Internal helper method to construct new instance from known good path-string. 
            I.e. one which has been created from combining existing FileSystemPath and FileSystemPathSection values.
            </summary>
        </member>
        <member name="M:PW.IO.FileSystemObjects.FilePath.From(PW.IO.FileSystemObjects.DirectoryPath,PW.IO.FileSystemObjects.FileName)">
            <summary>
            Creates a new <see cref="T:PW.IO.FileSystemObjects.FilePath"/> instance.
            </summary>
        </member>
        <member name="M:PW.IO.FileSystemObjects.FilePath.From(PW.IO.FileSystemObjects.DirectoryPath,PW.IO.FileSystemObjects.FileNameWithoutExtension,PW.IO.FileSystemObjects.FileExtension)">
            <summary>
            Creates a new <see cref="T:PW.IO.FileSystemObjects.FilePath"/> instance.
            </summary>
        </member>
        <member name="T:PW.IO.FileSystemObjects.FilePathParts">
            <summary>
            Separates a <see cref="T:PW.IO.FileSystemObjects.FilePath"/> into its constituent parts.
            </summary>
        </member>
        <member name="M:PW.IO.FileSystemObjects.FilePathParts.#ctor(PW.IO.FileSystemObjects.FilePath)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="filePath"></param>
        </member>
        <member name="P:PW.IO.FileSystemObjects.FilePathParts.Directory">
            <summary>
            The directory path to the file.
            </summary>
        </member>
        <member name="P:PW.IO.FileSystemObjects.FilePathParts.FileNameWithoutExtension">
            <summary>
            The name of the file, excluding the extension.
            </summary>
        </member>
        <member name="P:PW.IO.FileSystemObjects.FilePathParts.Extension">
            <summary>
            The file's extension
            </summary>
        </member>
        <member name="M:PW.IO.FileSystemObjects.FilePathParts.ToString">
            <summary>
            Reconstructs the parts back into a file path string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PW.IO.FileSystemObjects.FilePathParts.ToFilePath">
            <summary>
            Converts back to a <see cref="T:PW.IO.FileSystemObjects.FilePath"/> object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:PW.IO.FileSystemObjects.FileSystem">
            <summary>
            Static method for operating with file system directories and files.
            </summary>
        </member>
        <member name="M:PW.IO.FileSystemObjects.FileSystem.SendFileToRecycleBin(System.String)">
            <summary>
            Sends a file to the recycle bin.
            </summary>
        </member>
        <member name="M:PW.IO.FileSystemObjects.FileSystem.SendDirectoryToRecycleBin(System.String)">
            <summary>
            Sends a directory to the recycle bin.
            </summary>
        </member>
        <member name="M:PW.IO.FileSystemObjects.FileSystem.SendToRecycleBin(PW.IO.FileSystemObjects.FilePath)">
            <summary>
            Sends a file to the recycle bin.
            </summary>
        </member>
        <member name="M:PW.IO.FileSystemObjects.FileSystem.SendToRecycleBin(PW.IO.FileSystemObjects.DirectoryPath)">
            <summary>
            Sends a directory to the recycle bin.
            </summary>
        </member>
        <member name="M:PW.IO.FileSystemObjects.FileSystem.SelectInExplorer(PW.IO.FileSystemObjects.FilePath)">
            <summary>
            Opens explorer and selects the specified file.
            </summary>
            <param name="filePath"></param>
        </member>
        <member name="M:PW.IO.FileSystemObjects.FileSystem.Move(PW.IO.FileSystemObjects.FilePath,PW.IO.FileSystemObjects.DirectoryPath)">
            <summary>
            Moves a file on disk.
            </summary>
        </member>
        <member name="M:PW.IO.FileSystemObjects.FileSystem.Unblock(PW.IO.FileSystemObjects.FilePath)">
             <summary>
             'Unblocks' a file by deleting its associated 'Zone.Identifier' file. 
             Returns true on success or false if there was no associated zone identifier for the file. 
             </summary>
             <exception cref="T:System.IO.FileNotFoundException">File specified file does not exist.</exception>
             <exception cref="T:System.ArgumentNullException">The file path was null.</exception>
             <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
            <exception cref="T:System.IO.IOException">The specified file is in use.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception>
        </member>
        <member name="M:PW.IO.FileSystemObjects.FileSystem.Rename(PW.IO.FileSystemObjects.FilePath,PW.IO.FileSystemObjects.FileName)">
            <summary>
            Renames the file on disk and returns a new <see cref="T:PW.IO.FileSystemObjects.FilePath"/> instance for the renamed file.
            </summary>
        </member>
        <member name="M:PW.IO.FileSystemObjects.FileSystem.Move(PW.IO.FileSystemObjects.FilePath,PW.IO.FileSystemObjects.FilePath)">
            <summary>
            Moves the file on disk and returns the renamed file path.
            </summary>
        </member>
        <member name="M:PW.IO.FileSystemObjects.FileSystem.AppDataDirectory(System.String)">
            <summary>
            Returns Environment.SpecialFolder.ApplicationData\appName\
            </summary>
        </member>
        <member name="M:PW.IO.FileSystemObjects.FileSystem.GetFolderPath(System.Environment.SpecialFolder)">
            <summary>
            Wrapper: See <see cref="M:System.Environment.GetFolderPath(System.Environment.SpecialFolder)"/>
            </summary>
        </member>
        <member name="M:PW.IO.FileSystemObjects.FileSystem.GetFolderPath(System.Environment.SpecialFolder,System.Environment.SpecialFolderOption)">
            <summary>
            Wrapper: See <see cref="M:System.Environment.GetFolderPath(System.Environment.SpecialFolder,System.Environment.SpecialFolderOption)"/>
            </summary>
        </member>
        <member name="M:PW.IO.FileSystemObjects.FileSystem.Move(PW.IO.FileSystemObjects.DirectoryPath,PW.IO.FileSystemObjects.DirectoryPath)">
            <summary>
            Moves the directory on disk.
            </summary>
        </member>
        <member name="M:PW.IO.FileSystemObjects.FileSystem.CreateIfNotExists(PW.IO.FileSystemObjects.DirectoryPath)">
            <summary>
            Creates all directories and subdirectories in the specified path unless they already exist.
            </summary>
        </member>
        <member name="M:PW.IO.FileSystemObjects.FileSystem.Create(PW.IO.FileSystemObjects.DirectoryPath)">
            <summary>
            Creates all directories and subdirectories in the specified path, unless they already exist.
            </summary>
        </member>
        <member name="M:PW.IO.FileSystemObjects.FileSystem.CreateSubdirectories(PW.IO.FileSystemObjects.DirectoryPath,System.Collections.Generic.IEnumerable{PW.IO.FileSystemObjects.DirectoryName})">
            <summary>
            Creates sub-directories within the existing directory. Skips any sub-directory that already exist.
            </summary>
        </member>
        <member name="M:PW.IO.FileSystemObjects.FileSystem.EnumerateFiles(PW.IO.FileSystemObjects.DirectoryPath,System.String,System.IO.SearchOption)">
            <summary>
            Enumerates a directory on disk and returns a <see cref="T:PW.IO.FileSystemObjects.FilePath"/> object for each file which matches <paramref name="searchPattern"/>.
            </summary>
        </member>
        <member name="M:PW.IO.FileSystemObjects.FileSystem.EnumerateDirectories(PW.IO.FileSystemObjects.DirectoryPath,System.String,System.IO.SearchOption)">
            <summary>
            Enumerates a directory on disk and returns a <see cref="T:PW.IO.FileSystemObjects.DirectoryPath"/> object for each sub-directory which matches <paramref name="searchPattern"/>.
            </summary>
        </member>
        <member name="M:PW.IO.FileSystemObjects.FileSystem.EnumerateDirectories(PW.IO.FileSystemObjects.DirectoryPath,System.IO.SearchOption)">
            <summary>
            Enumerates a directory on disk and returns a <see cref="T:PW.IO.FileSystemObjects.DirectoryPath"/> object for each sub-directory./>.
            </summary>
        </member>
        <member name="M:PW.IO.FileSystemObjects.FileSystem.EnumerateFiles(PW.IO.FileSystemObjects.DirectoryPath,System.IO.SearchOption)">
            <summary>
            Enumerates a directory on disk and returns a <see cref="T:PW.IO.FileSystemObjects.FilePath"/> object for each file.
            </summary>
        </member>
        <member name="M:PW.IO.FileSystemObjects.FileSystem.EnumerateFiles(PW.IO.FileSystemObjects.DirectoryPath,System.String)">
            <summary>
            Enumerates all files which match <paramref name="searchPattern"/>.
            </summary>
        </member>
        <member name="M:PW.IO.FileSystemObjects.FileSystem.EnumerateFiles(PW.IO.FileSystemObjects.DirectoryPath,PW.IO.FileSystemObjects.FileExtension,System.IO.SearchOption)">
            <summary>
            Enumerates all files with the specified extension.
            </summary>
        </member>
        <member name="M:PW.IO.FileSystemObjects.FileSystem.EnumerateFiles(PW.IO.FileSystemObjects.DirectoryPath)">
            <summary>
            Enumerates a directory on disk and returns a <see cref="T:PW.IO.FileSystemObjects.FilePath"/> object for each file.
            </summary>
        </member>
        <member name="T:PW.IO.FileSystemObjects.FileSystemPath`1">
            <summary>
            Base class for objects representing a file system path. E.g. DirectoryPath or FilePath.
            </summary>
        </member>
        <member name="M:PW.IO.FileSystemObjects.FileSystemPath`1.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="P:PW.IO.FileSystemObjects.FileSystemPath`1.Comparer">
            <summary>
            Default comparer for sorting.
            </summary>
        </member>
        <member name="P:PW.IO.FileSystemObjects.FileSystemPath`1.Value">
            <summary>
            The path encapsulated by this <see cref="T:PW.IO.FileSystemObjects.FileSystemPath`1"/>
            </summary>
        </member>
        <member name="M:PW.IO.FileSystemObjects.FileSystemPath`1.Equals(System.Object)">
            <summary>
            Performs equality comparison.
            </summary>
        </member>
        <member name="M:PW.IO.FileSystemObjects.FileSystemPath`1.GetHashCode">
            <summary>
            Returns hash code. Cached after first call.
            </summary>
        </member>
        <member name="M:PW.IO.FileSystemObjects.FileSystemPath`1.ToString">
            <summary>
            This instance's path as a string.
            </summary>
        </member>
        <member name="M:PW.IO.FileSystemObjects.FileSystemPath`1.Equals(PW.IO.FileSystemObjects.FileSystemPath{`0})">
            <summary>
            Performs equality comparison.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:PW.IO.FileSystemObjects.FileSystemPath`1.CompareTo(PW.IO.FileSystemObjects.FileSystemPath{`0})">
            <summary>
            Compares two instances for sorting.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:PW.IO.FileSystemObjects.FileSystemPath`1.CompareTo(System.Object)">
            <summary>
            Compares two instances for sorting.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:PW.IO.FileSystemObjects.FileSystemPath`1.op_Equality(PW.IO.FileSystemObjects.FileSystemPath{`0},PW.IO.FileSystemObjects.FileSystemPath{`0})">
            <summary>
            Performs equality comparison of the two instances
            </summary>
            <returns></returns>
        </member>
        <member name="M:PW.IO.FileSystemObjects.FileSystemPath`1.op_Inequality(PW.IO.FileSystemObjects.FileSystemPath{`0},PW.IO.FileSystemObjects.FileSystemPath{`0})">
            <summary>
            Performs negative-equality comparison of the two instances
            </summary>
            <returns></returns>
        </member>
        <member name="M:PW.IO.FileSystemObjects.FileSystemPath`1.op_LessThan(PW.IO.FileSystemObjects.FileSystemPath{`0},PW.IO.FileSystemObjects.FileSystemPath{`0})">
            <summary>
            
            </summary>
        </member>
        <member name="M:PW.IO.FileSystemObjects.FileSystemPath`1.op_LessThanOrEqual(PW.IO.FileSystemObjects.FileSystemPath{`0},PW.IO.FileSystemObjects.FileSystemPath{`0})">
            <summary>
            
            </summary>
        </member>
        <member name="M:PW.IO.FileSystemObjects.FileSystemPath`1.op_GreaterThan(PW.IO.FileSystemObjects.FileSystemPath{`0},PW.IO.FileSystemObjects.FileSystemPath{`0})">
            <summary>
            
            </summary>
        </member>
        <member name="M:PW.IO.FileSystemObjects.FileSystemPath`1.op_GreaterThanOrEqual(PW.IO.FileSystemObjects.FileSystemPath{`0},PW.IO.FileSystemObjects.FileSystemPath{`0})">
            <summary>
            
            </summary>
        </member>
        <member name="T:PW.IO.FileSystemObjects.IFileSystemPath">
            <summary>
            Enables polymorphism for classes that inherit from <see cref="T:PW.IO.FileSystemObjects.FileSystemPath`1"/>
            </summary>
        </member>
        <member name="T:PW.IO.FileSystemObjects.FileSystemPathSection`1">
            <summary>
            Base class for objects representing a file system path. E.g. DirectoryPath or FilePath.
            </summary>
        </member>
        <member name="P:PW.IO.FileSystemObjects.FileSystemPathSection`1.Value">
            <summary>
            Returns the value contained by this instance.
            </summary>
        </member>
        <member name="M:PW.IO.FileSystemObjects.FileSystemPathSection`1.Equals(System.Object)">
            <summary>
            Performs equality comparison of the two instances
            </summary>
        </member>
        <member name="M:PW.IO.FileSystemObjects.FileSystemPathSection`1.GetHashCode">
            <summary>
            Returns hash code.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PW.IO.FileSystemObjects.FileSystemPathSection`1.ToString">
            <summary>
            This instance's path as a string.
            </summary>
        </member>
        <member name="M:PW.IO.FileSystemObjects.FileSystemPathSection`1.Equals(PW.IO.FileSystemObjects.FileSystemPathSection{`0})">
            <summary>
            Performs equality comparison.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:PW.IO.FileSystemObjects.FileSystemPathSection`1.CompareTo(PW.IO.FileSystemObjects.FileSystemPathSection{`0})">
            <summary>
            Compares two instances for sorting.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:PW.IO.FileSystemObjects.FileSystemPathSection`1.CompareTo(System.Object)">
            <summary>
            Compares two instances for sorting.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PW.IO.FileSystemObjects.FileSystemPathSection`1.op_Equality(PW.IO.FileSystemObjects.FileSystemPathSection{`0},PW.IO.FileSystemObjects.FileSystemPathSection{`0})">
            <summary>
            Performs equality comparison of the two instances
            </summary>
            <returns></returns>
        </member>
        <member name="M:PW.IO.FileSystemObjects.FileSystemPathSection`1.op_Inequality(PW.IO.FileSystemObjects.FileSystemPathSection{`0},PW.IO.FileSystemObjects.FileSystemPathSection{`0})">
            <summary>
            Performs negative-equality comparison of the two instances
            </summary>
            <returns></returns>
        </member>
        <member name="M:PW.IO.FileSystemObjects.FileSystemPathSection`1.op_LessThan(PW.IO.FileSystemObjects.FileSystemPathSection{`0},PW.IO.FileSystemObjects.FileSystemPathSection{`0})">
            <summary>
            Less than operator.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:PW.IO.FileSystemObjects.FileSystemPathSection`1.op_LessThanOrEqual(PW.IO.FileSystemObjects.FileSystemPathSection{`0},PW.IO.FileSystemObjects.FileSystemPathSection{`0})">
            <summary>
            Less than or equal operator.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:PW.IO.FileSystemObjects.FileSystemPathSection`1.op_GreaterThan(PW.IO.FileSystemObjects.FileSystemPathSection{`0},PW.IO.FileSystemObjects.FileSystemPathSection{`0})">
            <summary>
            Greater than operator.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:PW.IO.FileSystemObjects.FileSystemPathSection`1.op_GreaterThanOrEqual(PW.IO.FileSystemObjects.FileSystemPathSection{`0},PW.IO.FileSystemObjects.FileSystemPathSection{`0})">
            <summary>
            Greater than or equal operator.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="T:PW.IO.FileSystemObjects.OneDriveDirectory">
            <summary>
            A <see cref="T:PW.IO.FileSystemObjects.DirectoryPath"/> pointing to the OneDrive folder.
            </summary>
        </member>
        <member name="M:PW.IO.FileSystemObjects.OneDriveDirectory.#ctor">
            <summary>
            Creates a new instance.
            </summary>
            <exception cref="T:System.IO.DirectoryNotFoundException">OneDrive environmental variable is not set.</exception>
        </member>
        <member name="P:PW.IO.FileSystemObjects.OneDriveDirectory.Databases">
            <summary>
            
            </summary>
        </member>
        <member name="P:PW.IO.FileSystemObjects.OneDriveDirectory.Desktop">
            <summary>
            
            </summary>
        </member>
        <member name="P:PW.IO.FileSystemObjects.OneDriveDirectory.PersonalDocuments">
            <summary>
            
            </summary>
        </member>
        <member name="P:PW.IO.FileSystemObjects.OneDriveDirectory.WorkDocuments">
            <summary>
            
            </summary>
        </member>
        <member name="T:PW.IO.FileSystemObjects.PathElements">
            <summary>
            Replacement for <see cref="T:System.IO.Path"/> which returns 'FileSystemObjects' instead of strings.
            </summary>
        </member>
        <member name="M:PW.IO.FileSystemObjects.PathElements.GetFileName(System.String)">
            <summary>
            Gets the FileName from a file path string
            </summary>
        </member>
        <member name="T:PW.IO.KnownFolders">
            <summary>
            Class containing methods to retrieve specific file system paths.
            </summary>
        </member>
        <member name="M:PW.IO.KnownFolders.GetPath(PW.IO.KnownFolder)">
            <summary>
            Gets the current path to the specified known folder as currently configured. This does
            not require the folder to be existent.
            </summary>
            <param name="knownFolder">The known folder which current path will be returned.</param>
            <returns>The default path of the known folder.</returns>
            <exception cref="T:System.Runtime.InteropServices.ExternalException">Thrown if the path
                could not be retrieved.</exception>
        </member>
        <member name="M:PW.IO.KnownFolders.GetPath(PW.IO.KnownFolder,System.Boolean)">
            <summary>
            Gets the current path to the specified known folder as currently configured. This does
            not require the folder to be existent.
            </summary>
            <param name="knownFolder">The known folder which current path will be returned.</param>
            <param name="defaultUser">Specifies if the paths of the default user (user profile
                template) will be used. This requires administrative rights.</param>
            <returns>The default path of the known folder.</returns>
            <exception cref="T:System.Runtime.InteropServices.ExternalException">Thrown if the path
                could not be retrieved.</exception>
        </member>
        <member name="T:PW.IO.KnownFolder">
            <summary>
            Standard folders registered with the system. These folders are installed with Windows Vista
            and later operating systems, and a computer will have only folders appropriate to it
            installed.
            </summary>
        </member>
        <member name="F:PW.IO.KnownFolder.Contacts">
            <summary>
            Contacts folder
            </summary>
        </member>
        <member name="F:PW.IO.KnownFolder.Desktop">
            <summary>
            Desktop folder
            </summary>
        </member>
        <member name="F:PW.IO.KnownFolder.Documents">
            <summary>
            Documents folder
            </summary>
        </member>
        <member name="F:PW.IO.KnownFolder.Downloads">
            <summary>
            Downloads folder
            </summary>
        </member>
        <member name="F:PW.IO.KnownFolder.Favorites">
            <summary>
            Favorites folder
            </summary>
        </member>
        <member name="F:PW.IO.KnownFolder.Links">
            <summary>
            Links folder
            </summary>
        </member>
        <member name="F:PW.IO.KnownFolder.Music">
            <summary>
            Music folder
            </summary>
        </member>
        <member name="F:PW.IO.KnownFolder.Pictures">
            <summary>
            Pictures folder
            </summary>
        </member>
        <member name="F:PW.IO.KnownFolder.SavedGames">
            <summary>
            Saved Games folder
            </summary>
        </member>
        <member name="F:PW.IO.KnownFolder.SavedSearches">
            <summary>
            Saved Searches folder
            </summary>
        </member>
        <member name="F:PW.IO.KnownFolder.Videos">
            <summary>
            Videos folder
            </summary>
        </member>
        <member name="F:PW.IO.KnownFolder.OneDrive">
            <summary>
            OneDrive folder
            </summary>
        </member>
        <member name="T:PW.IO.PathBuilder">
            <summary>
            Class for building file paths -- seems a bit rubbish
            </summary>
        </member>
        <member name="M:PW.IO.PathBuilder.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:PW.IO.PathBuilder.#ctor(System.String)">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:PW.IO.PathBuilder.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:PW.IO.PathBuilder.ToString">
            <summary>
            tostring
            </summary>
        </member>
        <member name="M:PW.IO.PathBuilder.AppendDirectory(System.String)">
            <summary>
            Appends the directory name to the path
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:PW.IO.PathBuilder.AppendFilename(System.String)">
            <summary>
            Appends the file name to the path
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:PW.IO.StreamExtensions">
            <summary>
            Extension methods for the <see cref="T:System.IO.Stream"/> class.
            </summary>
        </member>
        <member name="M:PW.IO.StreamExtensions.CopyToMemory(System.IO.Stream)">
            <summary>
            Copies the source stream to a new <seealso cref="T:System.IO.MemoryStream"/>.
            </summary>
            <param name="source"></param>
            <returns>New instance of <seealso cref="T:System.IO.MemoryStream"/></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:PW.IO.StreamExtensions.CopyTo(System.IO.Stream,System.Action{System.Byte[]},System.Int32,System.Int32)">
            <summary>
            Copies <paramref name="length"/> bytes to the specified <paramref name="consumer"/> action.
            </summary>
            <param name="source">The source stream</param>
            <param name="consumer">The action which will consume the bytes</param>
            <param name="start">Start position in <paramref name="source"/> to start copying</param>
            <param name="length">The number of bytes passed to the <paramref name="consumer"/> action.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="T:PW.IValue`1">
            <summary>
            Interface to a class which has a value that it represents. 
            Use for equality comparison, sorting etc.
            </summary>
        </member>
        <member name="P:PW.IValue`1.Value">
            <summary>
            The value represented by this interface.
            </summary>
        </member>
        <member name="T:PW.LazyAsync`1">
            <summary>
            Provides support for asynchronous lazy initialization. E.g. var t = await AsyncLazy{T}
            </summary>
            <typeparam name="T">The type of object that is being asynchronously initialized.</typeparam>
        </member>
        <member name="M:PW.LazyAsync`1.#ctor(System.Func{`0})">
            <summary>
            Initializes a new instance which invokes '<paramref name="valueFactory"/>' within an awaitable Task.
            </summary>
            <param name="valueFactory">A function which returns <typeparamref name="T"/>.</param>
        </member>
        <member name="M:PW.LazyAsync`1.#ctor(System.Func{System.Threading.Tasks.Task{`0}})">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="taskFactory">A function which is invoked to return a Task. This Task is then run to return <typeparamref name="T"/>.</param>
        </member>
        <member name="M:PW.LazyAsync`1.GetAwaiter">
            <summary>
            Asynchronous infrastructure support. This method permits instances of this class to be awaited.
            </summary>
        </member>
        <member name="T:PW.Mapping`2">
            <summary>
            Generic mapping class. Associates <typeparamref name="TFrom"/> with <typeparamref name="TTo"/>.
            </summary>
            <typeparam name="TFrom">Left, map from.</typeparam>
            <typeparam name="TTo">Right, map to.</typeparam>
        </member>
        <member name="P:PW.Mapping`2.From">
            <summary>
            Map from.
            </summary>
        </member>
        <member name="P:PW.Mapping`2.To">
            <summary>
            Map to.
            </summary>
        </member>
        <member name="P:PW.Mapping`2.HashCode">
            <summary>
            Hashcode for this struct instance. NB: Can only precalculate when From and To are immutable.
            </summary>
        </member>
        <member name="M:PW.Mapping`2.#ctor(`0,`1)">
            <summary>
            
            </summary>
            <param name="from">Map from.</param>
            <param name="to">Map to.</param>
        </member>
        <member name="M:PW.Mapping`2.Equals(System.Object)">
            <summary>
            Tests for equality.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:PW.Mapping`2.GetHashCode">
            <summary>
            Returns the has code.
            </summary>
        </member>
        <member name="M:PW.Mapping`2.op_Equality(PW.Mapping{`0,`1},PW.Mapping{`0,`1})">
            <summary>
            Test for equality.
            </summary>
        </member>
        <member name="M:PW.Mapping`2.op_Inequality(PW.Mapping{`0,`1},PW.Mapping{`0,`1})">
            <summary>
            Test for inequality.
            </summary>
        </member>
        <member name="M:PW.Mapping`2.Equals(PW.Mapping{`0,`1})">
            <summary>
            Test for equality.
            </summary>
        </member>
        <member name="T:PW.Maths">
            <summary>
            Some maths methods
            </summary>
        </member>
        <member name="M:PW.Maths.IsPerfectSquare(System.Int32)">
            <summary>
            
            </summary>
            <param name="num"></param>
            <returns></returns>
        </member>
        <member name="M:PW.Maths.GetPerfectRoot(System.Int32)">
            <summary>
            
            </summary>
            <param name="num"></param>
            <returns></returns>
        </member>
        <member name="T:PW.NativeMethods.SafeNativeMethods">
            <summary>
            Wrapper for Win32 API calls.
            </summary>
        </member>
        <member name="M:PW.NativeMethods.SafeNativeMethods.StrCmpLogicalW(System.String,System.String)">
            <summary>
            Compares two Unicode strings. Digits in the strings are considered as numerical content rather than text. This test is not case-sensitive.
            </summary>
            <param name="psz1">A pointer to the first null-terminated string to be compared.</param>
            <param name="psz2">A pointer to the second null-terminated string to be compared.</param>
            <returns>    
            Returns zero if the strings are identical.    
            Returns 1 if the string pointed to by psz1 has a greater value than that pointed to by psz2.     
            Returns -1 if the string pointed to by psz1 has a lesser value than that pointed to by psz2.
            Returns -2 if either or both strings are null.
            </returns>
        </member>
        <member name="M:PW.NativeMethods.SafeNativeMethods.StrFormatByteSizeW(System.UInt64,System.Text.StringBuilder,System.UInt32)">
            <summary>
            Converts a numeric value into a string that represents the number expressed as a size value in bytes, kilobytes, megabytes, or gigabytes, depending on the size.
            </summary>
            <param name="valueToConvert">The numeric value to be converted.</param>
            <param name="builder">A <see cref="T:System.Text.StringBuilder"/> that, when this function returns successfully, receives the converted number.</param>
            <param name="builderCapacity">The size of the buffer pointed to by <paramref name="builder"/>, in characters.</param>
            <returns>Returns a pointer to the converted string, or NULL if the conversion fails.</returns>
        </member>
        <member name="T:PW.Net.CidrAddressRange">
            <summary>
            Represents a CIDR IP4 address range. E.g. 192.168.0.0/24 is IP4 address range: 192.168.0.1 to 192.168.0.254 .
            Currently only supports /8, /16, /24 and /32 masks, when creating from existing <see cref="T:PW.Net.IP4Address"/>.
            </summary>
        </member>
        <member name="T:PW.Net.CidrAddressRange.Range">
            <summary>
            Sizes of address range by class
            </summary>
        </member>
        <member name="F:PW.Net.CidrAddressRange.Range.A">
            <summary>
            Class A
            </summary>
        </member>
        <member name="F:PW.Net.CidrAddressRange.Range.B">
            <summary>
            Class B
            </summary>
        </member>
        <member name="F:PW.Net.CidrAddressRange.Range.C">
            <summary>
            Class C
            </summary>
        </member>
        <member name="F:PW.Net.CidrAddressRange.Range.SingleIP">
            <summary>
            Single IP
            </summary>
        </member>
        <member name="M:PW.Net.CidrAddressRange.From(PW.Net.IP4Address,PW.Net.CidrAddressRange.Range)">
            <summary>
            
            </summary>
        </member>
        <member name="M:PW.Net.CidrAddressRange.Mask">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:PW.Net.CidrAddressRange.From(PW.Net.IP4Address)">
            <summary>
            Converts a single IP4 address into CIDR notation. E.g. 192.168.0.1 --> 192.168.0.1/32
            </summary>
        </member>
        <member name="T:PW.Net.FileUrlComponents">
            <summary>
            Represents the path-name-extension components of which a file url is comprised.
            </summary>
        </member>
        <member name="P:PW.Net.FileUrlComponents.Path">
            <summary>
            Url path to the file
            </summary>
        </member>
        <member name="P:PW.Net.FileUrlComponents.NameWithoutExtension">
            <summary>
            Name of the file, without the file extension
            </summary>
        </member>
        <member name="P:PW.Net.FileUrlComponents.Extension">
            <summary>
            File extension
            </summary>
        </member>
        <member name="P:PW.Net.FileUrlComponents.Name">
            <summary>
            The file name and extension
            </summary>
        </member>
        <member name="M:PW.Net.FileUrlComponents.ToString">
            <summary>
            Reconstructs path elements back to a single string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PW.Net.FileUrlComponents.#ctor(System.String)">
            <summary>
            Creates a new instance from a complete file url.
            </summary>
        </member>
        <member name="M:PW.Net.FileUrlComponents.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a new instance with the specified values.
            </summary>
        </member>
        <member name="M:PW.Net.FileUrlComponents.Rename(System.Func{System.String,System.String})">
            <summary>
            Returns a new instance with the name set to the value returned by <paramref name="func"/>.
            </summary>
        </member>
        <member name="M:PW.Net.FileUrlComponents.Rename(System.String)">
            <summary>
            Returns a new instance with the specified new name.
            </summary>
        </member>
        <member name="M:PW.Net.FileUrlComponents.ChangeExtension(System.String)">
            <summary>
            Returns a new instance with the extension set to the supplied value.
            </summary>
        </member>
        <member name="M:PW.Net.FileUrlComponents.ChangePath(System.String)">
            <summary>
            Returns a new instance with the path set to the supplied value.
            </summary>
        </member>
        <member name="M:PW.Net.FileUrlComponents.ChangePath(System.Func{System.String,System.String})">
            <summary>
            Returns a new instance with the path set to the value returned by <paramref name="func"/>.
            </summary>
        </member>
        <member name="M:PW.Net.FileUrlComponents.GetEqualityComponents">
            <summary>
            Returns the components (values) which are required for equality comparison.
            </summary>
            <returns></returns>
        </member>
        <member name="T:PW.Net.IP4Address">
            <summary>
            Primitive to represent an IP4 Address
            </summary>
        </member>
        <member name="P:PW.Net.IP4Address.Octets">
            <summary>
            Byte for each octet of the array.
            </summary>
        </member>
        <member name="P:PW.Net.IP4Address.OctetStrings">
            <summary>
            String for each octet of the array.
            </summary>
        </member>
        <member name="M:PW.Net.IP4Address.Validate">
            <summary>
            Validates that the value represents an IP4 address.
            </summary>
        </member>
        <member name="T:PW.Net.IP4AddressMask">
            <summary>
            
            </summary>
        </member>
        <member name="T:PW.Net.PeriodicPing">
            <summary>
            Pings an IP address at a specified interval. Instances should be disposed after use.
            </summary>
        </member>
        <member name="E:PW.Net.PeriodicPing.OnPing">
            <summary>
            Notifies clients of a reply from a ping operation.
            </summary>
        </member>
        <member name="T:PW.Net.PeriodicPing.PingEventHandler">
            <summary>
            Represents the method which will handle the <see cref="E:PW.Net.PeriodicPing.OnPing"/> event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="E:PW.Net.PeriodicPing.OnPingException">
            <summary>
            Invoked when Ping throws an exception
            </summary>
        </member>
        <member name="T:PW.Net.PeriodicPing.PingExceptionEventHandler">
            <summary>
            Delegate for <see cref="E:PW.Net.PeriodicPing.OnPingException"/> event
            </summary>
        </member>
        <member name="P:PW.Net.PeriodicPing.Period">
            <summary>
            The interval between pings
            </summary>
        </member>
        <member name="M:PW.Net.PeriodicPing.Stop">
            <summary>
            Stops the ping timer. Any ping(s) in flight will still trigger the <see cref="E:PW.Net.PeriodicPing.OnPing"/> event.
            </summary>
        </member>
        <member name="M:PW.Net.PeriodicPing.Start">
            <summary>
            Starts the ping timer, using the current <see cref="P:PW.Net.PeriodicPing.Period"/>
            </summary>
        </member>
        <member name="P:PW.Net.PeriodicPing.WaitForPeriodAfterStart">
            <summary>
            After starting, whether the first ping should be immediate or after a <see cref="P:PW.Net.PeriodicPing.Period"/> has elapsed. Default value is false.
            </summary>
        </member>
        <member name="M:PW.Net.PeriodicPing.#ctor(System.Net.IPAddress,System.Threading.SynchronizationContext)">
            <summary>
            Creates a new <see cref="T:PW.Net.PeriodicPing"/> instance to ping the specified IP address.
            </summary>
        </member>
        <member name="M:PW.Net.PeriodicPing.Dispose">
            <summary>
            Disposes resources used by the <see cref="T:PW.Net.PeriodicPing"/> instance.
            </summary>
        </member>
        <member name="T:PW.Net.PingExceptionEventArgs">
            <summary>
            <see cref="E:PW.Net.PeriodicPing.OnPingException"/> event arguments.
            </summary>
        </member>
        <member name="P:PW.Net.PingExceptionEventArgs.Exception">
            <summary>
            The exception that occurred.
            </summary>
        </member>
        <member name="T:PW.PropertyComparer`1">
            <summary>
            Compare an object by any property.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:PW.PropertyComparer`1.#ctor(System.Func{`0,System.IComparable},PW.SortOrder)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="selector">Function to determine property to compare.</param>
            <param name="sortOrder">Guess</param>
        </member>
        <member name="P:PW.PropertyComparer`1.SortOrder">
            <summary>
            Sort order for compare method
            </summary>
        </member>
        <member name="M:PW.PropertyComparer`1.Compare(`0,`0)">
            <summary>
            Compare two objects for sorting purposes.
            </summary>
        </member>
        <member name="T:PW.ResettableLazy`1">
            <summary>
            A version of <see cref="T:System.Lazy`1"/> which supports resetting to its initial state, before the value was created.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:PW.ResettableLazy`1.Value">
            <summary>
            Gets the lazily initialized value of the current <see cref="T:PW.ResettableLazy`1"/> instance.
            </summary>
        </member>
        <member name="P:PW.ResettableLazy`1.IsValueCreated">
            <summary>
            Gets a value that indicates whether a value has been created for this <see cref="T:PW.ResettableLazy`1"/> instance.
            </summary>
        </member>
        <member name="M:PW.ResettableLazy`1.#ctor(System.Func{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:PW.ResettableLazy`1"/> class. When lazy initialization
            occurs, the specified initialization function is used.
            </summary>
        </member>
        <member name="M:PW.ResettableLazy`1.InitNewLazyUsingFactory">
            <summary>
            Centralized initialization of the object.
            </summary>
        </member>
        <member name="M:PW.ResettableLazy`1.Reset(System.Action{`0})">
            <summary>
            Resets the instance so that there is no longer a value. Does nothing if there is no current value.
            </summary>
            <param name="shutdownAction">Optional shutdown operation to perform on the value <typeparamref name="T"/></param>
        </member>
        <member name="T:PW.SetOnlyFlag">
            <summary>
            A flag value, which can only be set.
            </summary>
        </member>
        <member name="P:PW.SetOnlyFlag.IsSet">
            <summary>
            Whether the flag has been set.
            </summary>
        </member>
        <member name="M:PW.SetOnlyFlag.Set">
            <summary>
            Sets the flag.
            </summary>
        </member>
        <member name="M:PW.SetOnlyFlag.op_Implicit(PW.SetOnlyFlag)~System.Boolean">
            <summary>
            Returns true if the flag has been set, otherwise false.
            </summary>
            <param name="flag"></param>
        </member>
        <member name="T:PW.SortOrder">
            <summary>
            Specifies the direction of a sort operation.
            </summary>
        </member>
        <member name="F:PW.SortOrder.Ascending">
            <summary>
            Sort Ascending
            </summary>
        </member>
        <member name="F:PW.SortOrder.Descending">
            <summary>
            Sort Descending
            </summary>
        </member>
        <member name="F:PW.SortOrder.Unspecified">
            <summary>
            Sort direction unspecified
            </summary>
        </member>
        <member name="T:PW.Threading.BlockingSynchronizationContext">
            <summary> 
            A SynchronizationContext which blocks and waits for completion.
            Use: Thread A starts thread B and is blocked until thread B is complete or disposed.
            Thread B can post messages back to run in the context of thread A.
            </summary>
        </member>
        <member name="P:PW.Threading.BlockingSynchronizationContext.Queue">
            <summary>The queue of work items.</summary>
        </member>
        <member name="M:PW.Threading.BlockingSynchronizationContext.Post(System.Threading.SendOrPostCallback,System.Object)">
            <summary>Dispatches an asynchronous message to the synchronization context.</summary>
            <param name="d">The System.Threading.SendOrPostCallback delegate to call.</param>
            <param name="state">The object passed to the delegate.</param>
        </member>
        <member name="M:PW.Threading.BlockingSynchronizationContext.Send(System.Threading.SendOrPostCallback,System.Object)">
            <summary>Not supported.</summary>
        </member>
        <member name="M:PW.Threading.BlockingSynchronizationContext.WaitForCompletion(System.Threading.CancellationToken)">
            <summary>Runs an loop to process all queued work items. Will block until cancelled via the <see cref="T:System.Threading.CancellationToken"/>.</summary>
        </member>
        <member name="M:PW.Threading.BlockingSynchronizationContext.Complete">
            <summary>Notifies the context that no more work will arrive.</summary>
        </member>
        <member name="M:PW.Threading.BlockingSynchronizationContext.Dispose">
            <summary>
            Releases resources.
            </summary>
        </member>
        <member name="T:PW.Threading.ThreadSafeRandom">
            <summary>
            A thread-safe wrapper for the initialisation of <see cref="T:System.Random"/>.
            See: https://stackoverflow.com/questions/273313/randomize-a-listt
            </summary>
        </member>
        <member name="F:PW.Threading.ThreadSafeRandom.Local">
            <summary>
            Instance is created for each thread.
            </summary>
        </member>
        <member name="P:PW.Threading.ThreadSafeRandom.ThisThreadsRandom">
            <summary>
            Returns a <see cref="T:System.Random"/> for use on the calling thread.
            </summary>
        </member>
        <member name="T:PW.Threading.ThreadSynchronizationContext">
            <summary>
            Supports thread synchronization between non-UI threads.
            </summary>
        </member>
        <member name="M:PW.Threading.ThreadSynchronizationContext.#ctor">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="M:PW.Threading.ThreadSynchronizationContext.Post(System.Threading.SendOrPostCallback,System.Object)">
            <summary>Dispatches an asynchronous message to the synchronization context.</summary>
            <param name="d">The System.Threading.SendOrPostCallback delegate to call.</param>
            <param name="state">The object passed to the delegate.</param>
        </member>
        <member name="M:PW.Threading.ThreadSynchronizationContext.Send(System.Threading.SendOrPostCallback,System.Object)">
            <summary>
            Sends and waits
            </summary>
            <param name="d"></param>
            <param name="state"></param>
        </member>
        <member name="P:PW.Threading.ThreadSynchronizationContext.WorkerThreadId">
            <summary>
            Managed thread id of the internal worker thread
            </summary>
        </member>
        <member name="M:PW.Threading.ThreadSynchronizationContext.WorkerThreadProc(System.Object)">
            <summary>Runs an loop to process all queued work items.</summary>
        </member>
        <member name="M:PW.Threading.ThreadSynchronizationContext.Dispose">
            <summary>
            Disposes the object
            </summary>
        </member>
        <member name="T:PW.ValueObjects.CaseInsensitiveString">
            <summary>
            A type of string which can be compared ignoring case.
            </summary>
        </member>
        <member name="M:PW.ValueObjects.CaseInsensitiveString.Equals(PW.ValueObjects.ValueOf{System.String,PW.ValueObjects.CaseInsensitiveString})">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="T:PW.ValueObjects.ErrorMessage">
            <summary>
            Represents a error message string. String is not validated.
            </summary>
        </member>
        <member name="P:PW.ValueObjects.ErrorMessage.Empty">
            <summary>
            Returns an empty error message.
            </summary>
        </member>
        <member name="T:PW.ValueObjects.NamedValue`1">
            <summary>
            Represents a value which has a name.
            </summary>
            <typeparam name="T">The type of the value</typeparam>
        </member>
        <member name="M:PW.ValueObjects.NamedValue`1.#ctor(System.String,`0)">
            <summary>
            Creates a new instance.
            </summary>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="P:PW.ValueObjects.NamedValue`1.Name">
            <summary>
            Name of the value.
            </summary>
        </member>
        <member name="P:PW.ValueObjects.NamedValue`1.Value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="M:PW.ValueObjects.NamedValue`1.GetEqualityComponents">
            <summary>
            
            </summary>
        </member>
        <member name="M:PW.ValueObjects.NamedValue`1.ToString">
            <summary>
            Custom ToString
            </summary>
        </member>
        <member name="T:PW.ValueObjects.ValidationResult">
            <summary>
            Represents a ok/error validation result.
            </summary>
        </member>
        <member name="P:PW.ValueObjects.ValidationResult.Ok">
            <summary>
            Returns an 'OK' validation result.
            </summary>
        </member>
        <member name="M:PW.ValueObjects.ValidationResult.Fail(PW.ValueObjects.ErrorMessage)">
            <summary>
            Creates a failure validation result.
            </summary>
        </member>
        <member name="P:PW.ValueObjects.ValidationResult.IsSuccess">
            <summary>
            Returns true if the <see cref="T:PW.ValueObjects.ValidationResult"/> represents success.
            </summary>
        </member>
        <member name="P:PW.ValueObjects.ValidationResult.IsFailure">
            <summary>
            Returns true if the <see cref="T:PW.ValueObjects.ValidationResult"/> represents failure.
            </summary>
        </member>
        <member name="P:PW.ValueObjects.ValidationResult.Error">
            <summary>
            If the <see cref="T:PW.ValueObjects.ValidationResult"/> represents failure, returns reason, otherwise returns <see cref="P:PW.ValueObjects.ErrorMessage.Empty"/>.
            </summary>
        </member>
        <member name="M:PW.ValueObjects.ValidationResult.op_Implicit(PW.ValueObjects.ErrorMessage)~PW.ValueObjects.ValidationResult">
            <summary>
            Implicitly convert <see cref="T:PW.ValueObjects.ErrorMessage"/> into a new instance of <see cref="M:PW.ValueObjects.ValidationResult.Fail(PW.ValueObjects.ErrorMessage)"/>
            </summary>
        </member>
        <member name="M:PW.ValueObjects.ValidationResult.FromErrorMessage(PW.ValueObjects.ErrorMessage)">
            <summary>
            
            </summary>
        </member>
        <member name="T:PW.ValueObjects.ValueOf`2">
            <summary>
            Base class for primitive data types. Avoid 'primitive obsession'
            </summary>
            <example>class FilePath : DataPrimitive{string, FilePath}</example> 
        </member>
        <member name="M:PW.ValueObjects.ValueOf`2.Validate">
            <summary>
            Optionally override to perform validation.
            </summary>
        </member>
        <member name="P:PW.ValueObjects.ValueOf`2.Value">
            <summary>
            The value of the underlying data type.
            </summary>
        </member>
        <member name="M:PW.ValueObjects.ValueOf`2.op_Explicit(PW.ValueObjects.ValueOf{`0,`1})~`0">
            <summary>
            Explicitly converts the ValueOf back to the underlying <typeparamref name="TValue"/> type."/>
            </summary>
            <param name="dataType"></param>
        </member>
        <member name="M:PW.ValueObjects.ValueOf`2.op_Explicit(`0)~PW.ValueObjects.ValueOf{`0,`1}">
            <summary>
            Explicitly convert <typeparamref name="TValue"/> into a new instance of <see cref="T:PW.ValueObjects.ValueOf`2"/>
            </summary>
            <exception cref="T:System.InvalidCastException">Thrown if validation of <paramref name="value"/> fails.</exception>
        </member>
        <member name="M:PW.ValueObjects.ValueOf`2.From(`0)">
            <summary>
            Creates a new instance of <see cref="T:PW.ValueObjects.ValueOf`2"/>
            </summary>
        </member>
        <member name="M:PW.ValueObjects.ValueOf`2.TryFrom(`0)">
            <summary>
            Attempts to convert <paramref name="value"/> into <typeparamref name="TSelf"/>.
            </summary>
        </member>
        <member name="M:PW.ValueObjects.ValueOf`2.Equals(PW.ValueObjects.ValueOf{`0,`1})">
            <summary>
            Performs equality comparison of the two instances
            </summary>
            <returns></returns>
        </member>
        <member name="M:PW.ValueObjects.ValueOf`2.Equals(System.Object)">
            <summary>
            Performs equality comparison of the two instances
            </summary>
            <returns></returns>
        </member>
        <member name="M:PW.ValueObjects.ValueOf`2.GetHashCode">
            <summary>
            Returns the hash code for <typeparamref name="TValue"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:PW.ValueObjects.ValueOf`2.op_Equality(PW.ValueObjects.ValueOf{`0,`1},PW.ValueObjects.ValueOf{`0,`1})">
            <summary>
            Performs equality comparison of the two instances
            </summary>
            <returns></returns>
        </member>
        <member name="M:PW.ValueObjects.ValueOf`2.op_Inequality(PW.ValueObjects.ValueOf{`0,`1},PW.ValueObjects.ValueOf{`0,`1})">
            <summary>
            Performs negative-equality comparison of the two instances
            </summary>
            <returns></returns>
        </member>
        <member name="M:PW.ValueObjects.ValueOf`2.ToString">
            <summary>
            Returns ToString() for <typeparamref name="TValue"/>
            </summary>
            <returns></returns>
        </member>
        <member name="T:PW.ValueObjects.WriteOnceValue`1">
            <summary>
            Represents a value type, which can only be set once.
            </summary>
        </member>
        <member name="P:PW.ValueObjects.WriteOnceValue`1.HasValue">
            <summary>
            Whether the value has been set.
            </summary>
        </member>
        <member name="M:PW.ValueObjects.WriteOnceValue`1.ToString">
            <summary>
            Returns <see cref="P:PW.ValueObjects.WriteOnceValue`1.Value"/> as a string, or an empty string if not set.
            </summary>    
        </member>
        <member name="P:PW.ValueObjects.WriteOnceValue`1.Value">
            <summary>
            Get/Set the value. Throws exceptions if attempting to set more than once, or get when not set.
            </summary>
        </member>
        <member name="P:PW.ValueObjects.WriteOnceValue`1.ValueOrDefault">
            <summary>
            Returns the value if set, otherwise returns default.
            </summary>
        </member>
        <member name="M:PW.ValueObjects.WriteOnceValue`1.op_Implicit(PW.ValueObjects.WriteOnceValue{`0})~`0">
            <summary>
            Implicitly converts <see cref="T:PW.ValueObjects.WriteOnceValue`1"/> to <typeparamref name="T"/>.
            </summary>
            <param name="value"></param>
        </member>
    </members>
</doc>
ent.
            </remarks>
        </member>
        <member name="P:System.Index.Start">
            <summary>Create an Index pointing at first element.</summary>
        </member>
        <member name="P:System.Index.End">
            <summary>Create an Index pointing at beyond last element.</summary>
        </member>
        <member name="M:System.Index.FromStart(System.Int32)">
            <summary>Create an Index from the start at the position indicated by the value.</summary>
            <param name="value">The index value from the start.</param>
        </member>
        <member name="M:System.Index.FromEnd(System.Int32)">
            <summary>Create an Index from the end at the position indicated by the value.</summary>
            <param name="value">The index value from the end.</param>
        </member>
        <member name="P:System.Index.Value">
            <summary>Returns the index value.</summary>
        </member>
        <member name="P:System.Index.IsFromEnd">
            <summary>Indicates whether the index is from the start or the end.</summary>
        </member>
        <member name="M:System.Index.GetOffset(System.Int32)">
            <summary>Calculate the offset from the start using the giving collection length.</summary>
            <param name="length">The length of the collection that the Index will be used with. length has to be a positive value</param>
            <remarks>
            For performance reason, we don't validate the input length parameter and the returned offset value against negative values.
            we don't validate either the returned offset is greater than the input length.
            It is expected Index will be used with collections which always have non negative length/count. If the returned offset is negative and
            then used to index a collection will get out of range exception which will be same affect as the validation.
            </remarks>
        </member>
        <member name="M:System.Index.Equals(System.Object)">
            <summary>Indicates whether the current Index object is equal to another object of the same type.</summary>
            <param name="value">An object to compare with this object</param>
        </member>
        <member name="M:System.Index.Equals(System.Index)">
            <summary>Indicates whether the current Index object is equal to another Index object.</summary>
            <param name="other">An object to compare with this object</param>
        </member>
        <member name="M:System.Index.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
        </member>
        <member name="M:System.Index.op_Implicit(System.Int32)~System.Index">
            <summary>Converts integer number to an Index.</summary>
        </member>
        <member name="M:System.Index.ToString">
            <summary>Converts the value of the current Index object to its equivalent string representation.</summary>
        </member>
        <member name="T:System.Range">
            <summary>Represent a range has start and end indexes.</summary>
            <remarks>
            Range is used by the C# compiler to support the range syntax.
            <code>
            int[] someArray = new int[5] { 1, 2, 3, 4, 5 };
            int[] subArray1 = someArray[0..2]; // { 1, 2 }
            int[] subArray2 = someArray[1..^0]; // { 2, 3, 4, 5 }
            </code>
            </remarks>
        </member>
        <member name="P:System.Range.Start">
            <summary>Represent the inclusive start index of the Range.</summary>
        </member>
        <member name="P:System.Range.End">
            <summary>Represent the exclusive end index of the Range.</summary>
        </member>
        <member name="M:System.Range.#ctor(System.Index,System.Index)">
            <summary>Construct a Range object using the start and end indexes.</summary>
            <param name="start">Represent the inclusive start index of the range.</param>
            <param name="end">Represent the exclusive end index of the range.</param>
        </member>
        <member name="M:System.Range.Equals(System.Object)">
            <summary>Indicates whether the current Range object is equal to another object of the same type.</summary>
            <param name="value">An object to compare with this object</param>
        </member>
        <member name="M:System.Range.Equals(System.Range)">
            <summary>Indicates whether the current Range object is equal to another Range object.</summary>
            <param name="other">An object to compare with this object</param>
        </member>
        <member name="M:System.Range.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
        </member>
        <member name="M:System.Range.ToString">
            <summary>Converts the value of the current Range object to its equivalent string representation.</summary>
        </member>
        <member name="M:System.Range.StartAt(System.Index)">
            <summary>Create a Range object starting from start index to the end of the collection.</summary>
        </member>
        <member name="M:System.Range.EndAt(System.Index)">
            <summary>Create a Range object starting from first element in the collection to the end Index.</summary>
        </member>
        <member name="P:System.Range.All">
            <summary>Create a Range object starting from first element to the end.</summary>
        </member>
        <member name="M:System.Range.GetOffsetAndLength(System.Int32)">
            <summary>Calculate the start offset and length of range object using a collection length.</summary>
            <param name="length">The length of the collection that the range will be used with. length has to be a positive value.</param>
            <remarks>
            For performance reason, we don't validate the input length parameter against negative values.
            It is expected Range will be used with collections which always have non negative length/count.
            We validate the range is inside the length scope though.
            </remarks>
        </member>
        <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.GetSubArray``1(``0[],System.Range)">
            <summary>
            Slices the specified array using the specified range.
            </summary>
        </member>
    </members>
</doc>
